{"version":3,"sources":["../../../src/frameworks/lazy/lazy.framework.ts"],"sourcesContent":["//#region Imports\n\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type { FrameworkContract } from '../../contracts';\nimport { type ILogger, createDefaultLogger } from '../../core';\n\n//#endregion\n\n/**\n * The framework that asynchronously instantiates your application and forwards the request to the framework as quickly as possible.\n *\n * @example\n * ```typescript\n * import express from 'express';\n * import { ServerlessAdapter } from '@h4ad/serverless-adapter';\n * import { ExpressFramework } from '@h4ad/serverless-adapter/lib/frameworks/express';\n * import { LazyFramework } from '@h4ad/serverless-adapter/lib/frameworks/lazy';\n *\n * const expressFramework = new ExpressFramework();\n * const factory = async () => {\n *   const app = express();\n *\n *   // do some asynchronous stuffs like create the database;\n *   await new Promise(resolve => setTimeout(resolve, 100);\n *\n *   return app;\n * };\n * const framework = new LazyFramework(expressFramework, factory);\n *\n * export const handler = ServerlessAdapter.new(null)\n *   .setFramework(framework)\n *   // set other configurations and then build\n *   .build();\n * ```\n *\n * @breadcrumb Frameworks / LazyFramework\n * @public\n */\nexport class LazyFramework<TApp> implements FrameworkContract<null> {\n  //#region Constructor\n\n  /**\n   * Default Constructor\n   */\n  constructor(\n    protected readonly framework: FrameworkContract<TApp>,\n    protected readonly factory: () => Promise<TApp>,\n    protected readonly logger: ILogger = createDefaultLogger(),\n  ) {\n    this.delayedFactory = Promise.resolve()\n      .then(() => factory())\n      .then(app => {\n        this.cachedApp = app;\n      })\n      .catch((error: Error) => {\n        // deal with the error only when receive some request\n        // to be able to return some message to user\n        this.logger.error(\n          'SERVERLESS_ADAPTER:LAZY_FRAMEWORK: An error occours during the creation of your app.',\n        );\n        this.logger.error(error);\n      });\n  }\n\n  //#endregion\n\n  //#region Protected Properties\n\n  /**\n   * The cached version of the app\n   */\n  protected cachedApp?: TApp;\n\n  /**\n   * The delayed factory to create an instance of the app\n   */\n  protected readonly delayedFactory: Promise<void>;\n\n  //#endregion\n\n  //#region Public Methods\n\n  /**\n   * {@inheritDoc}\n   */\n  public sendRequest(\n    _app: null,\n    request: IncomingMessage,\n    response: ServerResponse,\n  ): void {\n    if (this.cachedApp)\n      return this.framework.sendRequest(this.cachedApp, request, response);\n\n    this.delayedFactory.then(() => {\n      if (!this.cachedApp) {\n        return response.emit(\n          'error',\n          new Error(\n            'SERVERLESS_ADAPTER:LAZY_FRAMEWORK: The instance of the app returned by the factory is not valid, see the logs to learn more.',\n          ),\n        );\n      }\n\n      return this.framework.sendRequest(this.cachedApp, request, response);\n    });\n  }\n\n  //#endregion\n}\n"],"mappings":"0FAsCO,IAAMA,EAAN,KAA6D,CAMlE,YACqBC,EACAC,EACAC,EAAkBC,EAAoB,EACzD,CAHmB,eAAAH,EACA,aAAAC,EACA,YAAAC,EAEnB,KAAK,eAAiB,QAAQ,QAAQ,EACnC,KAAK,IAAMD,EAAQ,CAAC,EACpB,KAAKG,GAAO,CACX,KAAK,UAAYA,CACnB,CAAC,EACA,MAAOC,GAAiB,CAGvB,KAAK,OAAO,MACV,sFACF,EACA,KAAK,OAAO,MAAMA,CAAK,CACzB,CAAC,CACL,CA9DF,MAsCoE,CAAAC,EAAA,sBAiCxD,UAKS,eASZ,YACLC,EACAC,EACAC,EACM,CACN,GAAI,KAAK,UACP,OAAO,KAAK,UAAU,YAAY,KAAK,UAAWD,EAASC,CAAQ,EAErE,KAAK,eAAe,KAAK,IAClB,KAAK,UASH,KAAK,UAAU,YAAY,KAAK,UAAWD,EAASC,CAAQ,EAR1DA,EAAS,KACd,QACA,IAAI,MACF,8HACF,CACF,CAIH,CACH,CAGF","names":["LazyFramework","framework","factory","logger","createDefaultLogger","app","error","__name","_app","request","response"]}