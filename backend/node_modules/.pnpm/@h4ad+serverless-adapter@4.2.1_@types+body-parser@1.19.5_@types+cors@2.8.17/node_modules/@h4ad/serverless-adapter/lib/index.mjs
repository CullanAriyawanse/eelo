import"./chunk-22SSVZU5.mjs";import{A as D,B as _,a,b as r,c as o,d as p,e as l,f as T,g as h,h as E,i as d,j as c,k as R,l as u,m as S,n as m,o as A,p as w,q as s,r as b,s as C,t as f,u as g,v,w as k,x,y,z as L}from"./chunk-MQYXRLYI.mjs";import{a as t}from"./chunk-OYOJMOFP.mjs";var n=class i{static{t(this,"ServerlessAdapter")}constructor(e){this.app=e}app;binarySettings={contentEncodings:r,contentTypes:o};respondWithErrors=process.env.NODE_ENV==="development";log=s();adapters=[];framework;resolver;handler;static new(e){return new i(e)}setHandler(e){if(this.handler)throw new Error("SERVERLESS_ADAPTER: The handler should not set twice.");return this.handler=e,this}setResolver(e){if(this.resolver)throw new Error("SERVERLESS_ADAPTER: The resolver should not set twice.");return this.resolver=e,this}setFramework(e){if(this.framework)throw new Error("SERVERLESS_ADAPTER: The framework should not set twice.");return this.framework=e,this}setLogger(e){return this.log=e,this}setBinarySettings(e){return this.binarySettings={...this.binarySettings,...e},this}setRespondWithErrors(e){return this.respondWithErrors=e,this}addAdapter(e){return this.adapters.push(e),this}build(){if(!this.resolver)throw new Error("SERVERLESS_ADAPTER: Is required to set a resolver before build.");if(!this.framework)throw new Error("SERVERLESS_ADAPTER: Is required to set a framework before build.");if(!this.handler)throw new Error("SERVERLESS_ADAPTER: Is required to set a handler before build.");if(this.adapters.length===0)throw new Error("SERVERLESS_ADAPTER: Is required to set at least one adapter.");return this.handler.getHandler(this.app,this.framework,this.adapters,this.resolver,this.binarySettings,this.respondWithErrors,this.log)}};export{a as BaseHandler,o as DEFAULT_BINARY_CONTENT_TYPES,r as DEFAULT_BINARY_ENCODINGS,p as EmptyResponse,w as NO_OP,n as ServerlessAdapter,y as ServerlessRequest,D as ServerlessResponse,_ as ServerlessStreamResponse,v as buildStripBasePath,s as createDefaultLogger,S as getContentType,l as getCurrentInvoke,C as getDefaultIfUndefined,h as getEventBodyAsBuffer,E as getFlattenedHeadersMap,c as getFlattenedHeadersMapAndCookies,d as getMultiValueHeadersMap,f as getPathWithQueryStringParams,g as getQueryParamsStringFromRecord,L as getString,A as isBinary,u as isContentEncodingBinary,m as isContentTypeBinary,b as isInternalLogger,k as isStreamEnded,R as parseHeaders,T as setCurrentInvoke,x as waitForStreamComplete};
//# sourceMappingURL=index.mjs.map