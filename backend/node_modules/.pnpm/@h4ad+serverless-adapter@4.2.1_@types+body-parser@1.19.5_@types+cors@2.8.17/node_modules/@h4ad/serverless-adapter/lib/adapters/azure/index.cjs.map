{"version":3,"sources":["../../../src/adapters/azure/index.ts","../../../src/adapters/azure/http-trigger-v4.adapter.ts","../../../src/network/request.ts","../../../src/network/response.ts","../../../src/network/utils.ts","../../../src/network/response-stream.ts","../../../src/core/event-body.ts","../../../src/core/headers.ts","../../../src/core/no-op.ts","../../../src/core/logger.ts","../../../src/core/optional.ts","../../../src/core/path.ts","../../../src/core/stream.ts"],"sourcesContent":["export * from './http-trigger-v4.adapter';\n","//#region Imports\n\nimport { URL } from 'node:url';\nimport type {\n  Context,\n  Cookie,\n  HttpRequest,\n  HttpResponseSimple,\n} from '@azure/functions';\nimport type { BothValueHeaders } from '../../@types';\nimport type {\n  AdapterContract,\n  AdapterRequest,\n  GetResponseAdapterProps,\n  OnErrorProps,\n} from '../../contracts';\nimport {\n  getDefaultIfUndefined,\n  getEventBodyAsBuffer,\n  getFlattenedHeadersMap,\n  getPathWithQueryStringParams,\n} from '../../core';\n\n//#endregion\n\n/**\n * The options to customize the {@link HttpTriggerV4Adapter}\n *\n * @breadcrumb Adapters / Azure / HttpTriggerV4Adapter\n * @public\n */\nexport interface HttpTriggerV4AdapterOptions {\n  /**\n   * Strip base path for custom domains\n   *\n   * @defaultValue ''\n   */\n  stripBasePath?: string;\n}\n\n/**\n * The adapter to handle requests from Http Trigger on Azure Function V4.\n *\n * @example\n * ```typescript\n * const stripBasePath = '/any/custom/base/path'; // default ''\n * const adapter = new HttpTriggerV4Adapter({ stripBasePath });\n * ```\n *\n * @see {@link https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-node | Reference}\n *\n * @breadcrumb Adapters / Azure / HttpTriggerV4Adapter\n * @public\n */\nexport class HttpTriggerV4Adapter\n  implements AdapterContract<HttpRequest, Context, HttpResponseSimple>\n{\n  //#region Constructor\n\n  /**\n   * Default constructor\n   *\n   * @param options - The options to customize the {@link HttpTriggerV4Adapter}\n   */\n  constructor(protected readonly options?: HttpTriggerV4AdapterOptions) {}\n\n  //#endregion\n\n  //#region Public Methods\n\n  /**\n   * {@inheritDoc}\n   */\n  public getAdapterName(): string {\n    return HttpTriggerV4Adapter.name;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public canHandle(event: unknown, context: unknown): boolean {\n    const maybeEvent = event as Partial<HttpRequest> | undefined;\n    const maybeContext = context as Partial<Context> | undefined;\n\n    return !!(\n      maybeEvent &&\n      maybeEvent.method &&\n      maybeEvent.headers &&\n      maybeEvent.url &&\n      maybeEvent.query &&\n      maybeContext &&\n      maybeContext.traceContext &&\n      maybeContext.bindingDefinitions &&\n      maybeContext.log &&\n      !!maybeContext.log.info &&\n      maybeContext.bindingData\n    );\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public getRequest(event: HttpRequest): AdapterRequest {\n    const path = this.getPathFromEvent(event);\n\n    const method = event.method!;\n    const headers = getFlattenedHeadersMap(event.headers, ',', true);\n\n    let body: Buffer | undefined;\n\n    if (event.body) {\n      const [bufferBody, contentLength] = getEventBodyAsBuffer(\n        event.rawBody,\n        false,\n      );\n\n      body = bufferBody;\n      headers['content-length'] = String(contentLength);\n    }\n\n    const remoteAddress = headers['x-forwarded-for'];\n\n    return {\n      method,\n      path,\n      headers,\n      remoteAddress,\n      body,\n    };\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public getResponse({\n    body,\n    statusCode,\n    headers: originalHeaders,\n  }: GetResponseAdapterProps<HttpRequest>): HttpResponseSimple {\n    const headers = getFlattenedHeadersMap(originalHeaders, ',', true);\n    const cookies = this.getAzureCookiesFromHeaders(originalHeaders);\n\n    if (headers['set-cookie']) delete headers['set-cookie'];\n\n    return {\n      body,\n      statusCode,\n      headers,\n      // I tried to understand this property with\n      // https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/content-negotiation\n      // but I don't know if it's worth implementing this guy as an option\n      // I found out when this guy is set to true and the framework sets content-type, azure returns 500\n      // So I'll leave it as is and hope no one has any problems.\n      enableContentNegotiation: false,\n      cookies,\n    };\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public onErrorWhileForwarding({\n    error,\n    respondWithErrors,\n    event,\n    delegatedResolver,\n    log,\n  }: OnErrorProps<HttpRequest, HttpResponseSimple>): void {\n    const body = respondWithErrors ? error.stack : '';\n    const errorResponse = this.getResponse({\n      event,\n      statusCode: 500,\n      body: body || '',\n      headers: {},\n      isBase64Encoded: false,\n      log,\n    });\n\n    delegatedResolver.succeed(errorResponse);\n  }\n\n  //#endregion\n\n  //#region Protected Methods\n\n  /**\n   * Get path from event with query strings\n   *\n   * @param event - The event sent by serverless\n   */\n  protected getPathFromEvent(event: HttpRequest): string {\n    const stripBasePath = getDefaultIfUndefined(\n      this.options?.stripBasePath,\n      '',\n    );\n\n    const url = new URL(event.url);\n    const originalPath = url.pathname;\n\n    const replaceRegex = new RegExp(`^${stripBasePath}`);\n    const path = originalPath.replace(replaceRegex, '');\n\n    const queryParams = event.query;\n\n    return getPathWithQueryStringParams(path, queryParams);\n  }\n\n  /**\n   * Get the Azure Cookie list parsed from set-cookie header.\n   *\n   * @param headers - The headers object\n   */\n  protected getAzureCookiesFromHeaders(headers: BothValueHeaders): Cookie[] {\n    const setCookie = headers['set-cookie'];\n\n    const headerCookies = Array.isArray(setCookie)\n      ? setCookie\n      : setCookie\n        ? [setCookie]\n        : [];\n\n    return headerCookies.map(cookie => this.parseCookie(cookie));\n  }\n\n  /**\n   * Parse the string cookie to the Azure Cookie Object.\n   * This code was written by {@link https://github.com/zachabney | @zachabney}\n   * on {@link https://github.com/zachabney/azure-aws-serverless-express/blob/241d2d5c4d5906e4817662cad6426ec2cbbf9ca7/src/index.js#L4-L49 | this library}.\n   *\n   * @param cookie - The cookie\n   */\n  protected parseCookie(cookie: string): Cookie {\n    return cookie.split(';').reduce(\n      (azureCookieObject, cookieProperty, index) => {\n        const [key, value] = cookieProperty.split('=');\n\n        const sanitizedKey = key.toLowerCase().trim();\n        const sanitizedValue = value && value.trim();\n\n        if (index === 0) {\n          azureCookieObject.name = key;\n          azureCookieObject.value = sanitizedValue;\n\n          return azureCookieObject;\n        }\n\n        switch (sanitizedKey) {\n          case 'domain':\n            azureCookieObject.domain = sanitizedValue;\n            break;\n          case 'path':\n            azureCookieObject.path = sanitizedValue;\n            break;\n          case 'expires':\n            azureCookieObject.expires = new Date(sanitizedValue);\n            break;\n          case 'secure':\n            azureCookieObject.secure = true;\n            break;\n          case 'httponly':\n            azureCookieObject.httpOnly = true;\n            break;\n          case 'samesite':\n            azureCookieObject.sameSite = sanitizedValue as Cookie['sameSite'];\n            break;\n          case 'max-age':\n            azureCookieObject.maxAge = Number(sanitizedValue);\n            break;\n        }\n\n        return azureCookieObject;\n      },\n      { name: '', value: '' } as Cookie,\n    );\n  }\n\n  //#endregion\n}\n","// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\nimport { IncomingMessage } from 'node:http';\nimport type { AddressInfo } from 'node:net';\nimport type { SingleValueHeaders } from '../@types';\nimport { NO_OP } from '../core';\n\nconst HTTPS_PORT = 443;\n\n/**\n * The properties to create a {@link ServerlessRequest}\n *\n * @breadcrumb Network / ServerlessRequest\n * @public\n */\nexport interface ServerlessRequestProps {\n  /**\n   * The HTTP Method of the request\n   */\n  method: string;\n\n  /**\n   * The URL requested\n   */\n  url: string;\n\n  /**\n   * The headers from the event source\n   */\n  headers: SingleValueHeaders;\n\n  /**\n   * The body from the event source\n   */\n  body?: Buffer | Uint8Array;\n\n  /**\n   * The IP Address from caller\n   */\n  remoteAddress?: string;\n}\n\n/**\n * The class that represents an {@link http#IncomingMessage} created by the library to represent an actual request to the framework.\n *\n * @breadcrumb Network / ServerlessRequest\n * @public\n */\nexport class ServerlessRequest extends IncomingMessage {\n  constructor({\n    method,\n    url,\n    headers,\n    body,\n    remoteAddress,\n  }: ServerlessRequestProps) {\n    super({\n      encrypted: true,\n      readable: false,\n      remoteAddress,\n      address: () => ({ port: HTTPS_PORT }) as AddressInfo,\n      end: NO_OP,\n      destroy: NO_OP,\n    } as any);\n\n    this.statusCode = 200;\n    this.statusMessage = 'OK';\n    this.complete = true;\n    this.httpVersion = '1.1';\n    this.httpVersionMajor = 1;\n    this.httpVersionMinor = 1;\n    this.method = method;\n    this.headers = headers;\n    this.body = body;\n    this.url = url;\n    this.ip = remoteAddress;\n\n    this._read = () => {\n      this.push(body);\n      this.push(null);\n    };\n  }\n\n  ip?: string;\n  body?: Buffer | Uint8Array;\n}\n","// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\nimport { IncomingMessage, ServerResponse } from 'node:http';\nimport type { Socket } from 'node:net';\nimport { NO_OP } from '../core';\nimport { getString } from './utils';\n\nconst headerEnd = '\\r\\n\\r\\n';\nconst endChunked = '0\\r\\n\\r\\n';\n\nconst BODY = Symbol('Response body');\nconst HEADERS = Symbol('Response headers');\n\nfunction addData(stream: ServerlessResponse, data: Uint8Array | string) {\n  if (\n    Buffer.isBuffer(data) ||\n    typeof data === 'string' ||\n    data instanceof Uint8Array\n  )\n    stream[BODY].push(Buffer.from(data));\n  else throw new Error(`response.write() of unexpected type: ${typeof data}`);\n}\n\n/**\n * The properties to create a {@link ServerlessResponse}.\n *\n * @breadcrumb Network / ServerlessResponse\n * @public\n */\nexport interface ServerlessResponseProps {\n  /**\n   * The HTTP Method from request\n   */\n  method?: string;\n}\n\n/**\n * The class that represents a response instance used to send to the framework and wait until the framework finishes processing the request.\n * Once it's happens, we use the properties from this response to built the response to the cloud.\n *\n * @breadcrumb Network / ServerlessResponse\n * @public\n */\nexport class ServerlessResponse extends ServerResponse {\n  constructor({ method }: ServerlessResponseProps) {\n    super({ method } as any);\n\n    this[BODY] = [];\n    this[HEADERS] = {};\n\n    this.useChunkedEncodingByDefault = false;\n    this.chunkedEncoding = false;\n    this._header = '';\n\n    // this ignore is used because I need to ignore these write calls:\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L934-L935\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L937\n    let writesToIgnore = 1;\n\n    const socket: Partial<Socket> & { _writableState: any } = {\n      _writableState: {},\n      writable: true,\n      on: NO_OP,\n      removeListener: NO_OP,\n      destroy: NO_OP,\n      cork: NO_OP,\n      uncork: NO_OP,\n      write: (\n        data: Uint8Array | string,\n        encoding?: string | null | (() => void),\n        cb?: () => void,\n      ): any => {\n        if (typeof encoding === 'function') {\n          cb = encoding;\n          encoding = null;\n        }\n\n        if (this._header === '' || this._wroteHeader) {\n          if (!this.chunkedEncoding) addData(this, data);\n          else {\n            if (writesToIgnore > 0) writesToIgnore--;\n            else if (data !== endChunked) {\n              addData(this, data);\n              writesToIgnore = 3;\n            }\n          }\n        } else {\n          const string = getString(data);\n          const index = string.indexOf(headerEnd);\n\n          if (index !== -1) {\n            const remainder = string.slice(index + headerEnd.length);\n\n            if (remainder && !this.chunkedEncoding) addData(this, remainder);\n\n            this._wroteHeader = true;\n          }\n        }\n\n        if (typeof cb === 'function') cb();\n      },\n    };\n\n    this.assignSocket(socket as unknown as Socket);\n  }\n\n  _header: string;\n  _headers?: Record<any, any>;\n  _wroteHeader?: boolean;\n\n  [BODY]: any[];\n  [HEADERS]: Record<any, any>;\n\n  get headers(): Record<any, any> {\n    return this[HEADERS];\n  }\n\n  static from(res: IncomingMessage) {\n    const response = new ServerlessResponse({ method: res.method });\n\n    response.statusCode = res.statusCode || 0;\n    response[HEADERS] = res.headers;\n    response[BODY] = (res as any).body ? [Buffer.from((res as any).body)] : [];\n    response.end();\n\n    return response;\n  }\n\n  static body(res: ServerlessResponse): Buffer {\n    return Buffer.concat(res[BODY]);\n  }\n\n  static headers(res: ServerlessResponse) {\n    const headers = res.getHeaders();\n\n    return Object.assign(headers, res[HEADERS]);\n  }\n\n  override setHeader(\n    key: string,\n    value: number | string | readonly string[],\n  ): any {\n    if (this._wroteHeader) this[HEADERS][key] = value;\n    else super.setHeader(key, value);\n  }\n\n  override writeHead(\n    statusCode: number,\n    statusMessage?: string | any | any[],\n    obj?: any | any[],\n  ): any {\n    const headersObjOrArray =\n      typeof statusMessage === 'string' ? obj : statusMessage;\n\n    const arrayHeaders = Array.isArray(headersObjOrArray)\n      ? headersObjOrArray\n      : [headersObjOrArray || {}];\n\n    for (const headers of arrayHeaders) {\n      for (const name in headers) {\n        this.setHeader(name, headers[name]!);\n\n        if (!this._wroteHeader) {\n          // we only need to initiate super.headers once\n          // writeHead will add the other headers itself\n          break;\n        }\n      }\n    }\n\n    return this.callNativeWriteHead(statusCode, statusMessage, obj);\n  }\n\n  /**\n   * I use ignore here because in nodejs 12.x, statusMessage can be string | OutgoingHttpHeaders\n   * But in nodejs \\>=14.x, statusMessage can also be OutgoingHttpHeaders[]\n   * I take care of these cases above, but here I can't handle it well, so I give up\n   * nodejs 12.x ref: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v12/http.d.ts#L229\n   * nodejs 14.x ref: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v14/http.d.ts#L263\n   */\n  protected callNativeWriteHead(\n    statusCode: number,\n    statusMessage?: string | any | any[],\n    obj?: any | any[],\n  ): this {\n    return super.writeHead(statusCode, statusMessage, obj);\n  }\n}\n","/**\n * Get the data from a buffer, string, or Uint8Array\n *\n * @breadcrumb Network\n * @param data - The data that was written inside the stream\n */\nexport function getString(data: Buffer | string | unknown) {\n  if (Buffer.isBuffer(data)) return data.toString('utf8');\n  else if (typeof data === 'string') return data;\n  else if (data instanceof Uint8Array) return new TextDecoder().decode(data);\n  else throw new Error(`response.write() of unexpected type: ${typeof data}`);\n}\n","import { ServerResponse } from 'node:http';\nimport type { Socket } from 'node:net';\nimport type { Writable } from 'node:stream';\nimport type { BothValueHeaders } from '../@types';\nimport { type ILogger, NO_OP, parseHeaders } from '../core';\nimport { getString } from './utils';\n\nconst endChunked = '0\\r\\n\\r\\n';\nconst headerEnd = '\\r\\n\\r\\n';\nconst endStatusSeparator = '\\r\\n';\n\n/**\n * The properties to create a {@link ServerlessStreamResponse}.\n *\n * @breadcrumb Network / ServerlessStreamResponse\n * @public\n */\nexport interface ServerlessStreamResponseProps {\n  /**\n   * The HTTP Method from request\n   */\n  method?: string;\n\n  /**\n   * The callback to receive the headers when they are written to the stream\n   * You need to return a writable stream be able to continue writing the response\n   *\n   * @param statusCode - The status code of the response\n   * @param headers - The headers of the response\n   */\n  onReceiveHeaders: (statusCode: number, headers: BothValueHeaders) => Writable;\n\n  /**\n   * Instance of the logger\n   */\n  log: ILogger;\n}\n\n/**\n * The class that represents a response instance used to send to the framework and wait until the framework finishes processing the request.\n * This response is specially built to deal with transfer-encoding: chunked\n *\n * @breadcrumb Network / ServerlessStreamResponse\n * @public\n */\nexport class ServerlessStreamResponse extends ServerResponse {\n  constructor({\n    method,\n    onReceiveHeaders,\n    log,\n  }: ServerlessStreamResponseProps) {\n    super({ method } as any);\n\n    this.useChunkedEncodingByDefault = true;\n    this.chunkedEncoding = true;\n\n    let internalWritable: Writable | null = null;\n    let isFirstCall = true;\n    // this ignore is used because I need to ignore these write calls:\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L934-L935\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L937\n    let writesToIgnore = 0;\n\n    const socket: Partial<Socket> & { _writableState: any } = {\n      _writableState: {},\n      writable: true,\n      on: NO_OP,\n      removeListener: NO_OP,\n      destroy: NO_OP,\n      cork: NO_OP,\n      uncork: NO_OP,\n      write: (\n        data: Uint8Array | string,\n        encoding?: string | null | (() => void),\n        cb?: () => void,\n      ): any => {\n        // very unlikely, I don't even know how to reproduce this, but exist on types\n        // istanbul ignore if\n        if (typeof encoding === 'function') {\n          cb = encoding;\n          encoding = null;\n        }\n\n        log.debug('SERVERLESS_ADAPTER:RESPONSE_STREAM:DATA', () => ({\n          data: Buffer.isBuffer(data) ? data.toString('utf8') : data,\n          encoding,\n        }));\n\n        if (!isFirstCall && internalWritable) {\n          if (data === endChunked) {\n            internalWritable.end(cb);\n\n            return true;\n          }\n\n          if (writesToIgnore > 0) {\n            writesToIgnore--;\n            return true;\n          }\n\n          internalWritable.write(data, cb);\n          writesToIgnore = 3;\n        } else if (isFirstCall) {\n          isFirstCall = false;\n\n          const stringData = getString(data);\n          const endStatusIndex = stringData.indexOf(endStatusSeparator);\n          const status = +stringData.slice(0, endStatusIndex).split(' ')[1];\n          const endHeaderIndex = stringData.indexOf(headerEnd);\n\n          const headerData = stringData.slice(\n            endStatusIndex + 2,\n            endHeaderIndex,\n          );\n          const headers = parseHeaders(headerData);\n          log.debug(\n            'SERVERLESS_ADAPTER:RESPONSE_STREAM:FRAMEWORK_HEADERS',\n            () => ({\n              headers,\n            }),\n          );\n\n          writesToIgnore = 1;\n          internalWritable = onReceiveHeaders(status, headers);\n\n          // If we get an endChunked right after header which means the response body is empty, we need to immediately end the writable\n          if (stringData.substring(endHeaderIndex + 4) === endChunked)\n            internalWritable.end();\n        }\n\n        return true;\n      },\n    };\n\n    this.assignSocket(socket as unknown as Socket);\n  }\n}\n","/**\n * Get the event body as buffer from body string with content length\n *\n * @example\n * ```typescript\n * const body = '{}';\n * const [buffer, contentLength] = getEventBodyAsBuffer(body, false);\n * console.log(buffer);\n * // <Buffer 7b 7d>\n * console.log(contentLength);\n * // 2\n * ```\n *\n * @param body - The body string that can be encoded or not\n * @param isBase64Encoded - Tells if body string is encoded in base64\n *\n * @breadcrumb Core\n * @public\n */\nexport function getEventBodyAsBuffer(\n  body: string,\n  isBase64Encoded: boolean,\n): [body: Buffer, contentLength: number] {\n  const encoding: BufferEncoding = isBase64Encoded ? 'base64' : 'utf8';\n\n  const buffer = Buffer.from(body, encoding);\n  const contentLength = Buffer.byteLength(buffer, encoding);\n\n  return [buffer, contentLength];\n}\n","//#region Imports\n\nimport type { BothValueHeaders } from '../@types';\n\n//#endregion\n\n/**\n * Transform a header map and make sure the value is not an array\n *\n * @example\n * ```typescript\n * const headers = { 'accept-encoding': 'gzip', 'accept-language': ['en-US', 'en;q=0.9'] };\n * const flattenedHeaders = getFlattenedHeadersMap(headers, ',', true);\n * console.log(flattenedHeaders);\n * // { 'accept-encoding': 'gzip', 'accept-language': 'en-US,en;q=0.9' }\n * ```\n *\n * @param headersMap - The initial headers\n * @param separator - The separator used when we join the array of header's value\n * @param lowerCaseKey - Should put all keys in lowercase\n *\n * @breadcrumb Core / Headers\n * @public\n */\nexport function getFlattenedHeadersMap(\n  headersMap: BothValueHeaders,\n  separator: string = ',',\n  lowerCaseKey: boolean = false,\n): Record<string, string> {\n  return Object.keys(headersMap).reduce((acc, headerKey) => {\n    const newKey = lowerCaseKey ? headerKey.toLowerCase() : headerKey;\n    const headerValue = headersMap[headerKey];\n\n    if (Array.isArray(headerValue)) acc[newKey] = headerValue.join(separator);\n    else acc[newKey] = (headerValue ?? '') + '';\n\n    return acc;\n  }, {});\n}\n\n/**\n * Transforms a header map into a multi-value map header.\n *\n * @example\n * ```typescript\n * const headers = { 'accept-encoding': 'gzip', 'connection': ['keep-alive'] };\n * const multiValueHeaders = getMultiValueHeadersMap(headers);\n * console.log(multiValueHeaders);\n * // { 'accept-encoding': ['gzip'], 'connection': ['keep-alive'] }\n * ```\n *\n * @param headersMap - The initial headers\n *\n * @breadcrumb Core / Headers\n * @public\n */\nexport function getMultiValueHeadersMap(\n  headersMap: BothValueHeaders,\n): Record<string, string[]> {\n  return Object.keys(headersMap).reduce((acc, headerKey) => {\n    const headerValue = headersMap[headerKey];\n\n    acc[headerKey.toLowerCase()] = Array.isArray(headerValue)\n      ? headerValue.map(String)\n      : [String(headerValue)];\n\n    return acc;\n  }, {});\n}\n\n/**\n * The wrapper that holds the information about single value headers and cookies\n *\n * @breadcrumb Core / Headers\n * @public\n */\nexport type FlattenedHeadersAndCookies = {\n  /**\n   * Just the single value headers\n   */\n  headers: Record<string, string>;\n\n  /**\n   * The list of cookies\n   */\n  cookies: string[];\n};\n\n/**\n * Transforms a header map into a single value headers and cookies\n *\n * @param headersMap - The initial headers\n *\n * @breadcrumb Core / Headers\n * @public\n */\nexport function getFlattenedHeadersMapAndCookies(\n  headersMap: BothValueHeaders,\n): FlattenedHeadersAndCookies {\n  return Object.keys(headersMap).reduce(\n    (acc, headerKey) => {\n      const headerValue = headersMap[headerKey];\n      const lowerHeaderKey = headerKey.toLowerCase();\n\n      if (Array.isArray(headerValue)) {\n        if (lowerHeaderKey !== 'set-cookie')\n          acc.headers[headerKey] = headerValue.join(',');\n        else acc.cookies.push(...headerValue);\n      } else {\n        if (lowerHeaderKey === 'set-cookie' && headerValue !== undefined)\n          acc.cookies.push(headerValue ?? '');\n        else acc.headers[headerKey] = String(headerValue ?? '');\n      }\n\n      return acc;\n    },\n    {\n      cookies: [],\n      headers: {},\n    } as FlattenedHeadersAndCookies,\n  );\n}\n\n/**\n * Parse HTTP Raw Headers\n * Attribution to {@link https://github.com/kesla/parse-headers/blob/master/parse-headers.js}\n *\n * @param headers - The raw headers\n *\n * @breadcrumb Core / Headers\n * @public\n */\nexport function parseHeaders(\n  headers: string,\n): Record<string, string | string[]> {\n  if (!headers) return {};\n\n  const result = {};\n  const headersArr = headers.trim().split('\\n');\n\n  for (let i = 0; i < headersArr.length; i++) {\n    const row = headersArr[i];\n    const index = row.indexOf(':');\n    const key = row.slice(0, index).trim().toLowerCase();\n    const value = row.slice(index + 1).trim();\n\n    if (typeof result[key] === 'undefined') result[key] = value;\n    else if (Array.isArray(result[key])) result[key].push(value);\n    else result[key] = [result[key], value];\n  }\n\n  return result;\n}\n","/**\n * No operation function is used when we need to pass a function, but we don't want to specify any behavior.\n *\n * @breadcrumb Core\n * @public\n */\nexport const NO_OP: (...args: any[]) => any = () => void 0;\n","import { NO_OP } from './no-op';\n\n/**\n * The type representing the possible log levels to choose from.\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type LogLevels =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'none';\n\n/**\n * The options to customize {@link ILogger}\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type LoggerOptions = {\n  /**\n   * Select the log level, {@link LogLevels | see more}.\n   *\n   * @defaultValue error\n   */\n  level: LogLevels;\n};\n\n/**\n * The log function used in any level.\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type LoggerFN = (message: any, ...additional: any[]) => void;\n\n/**\n * The interface representing the logger, you can provide a custom logger by implementing this interface.\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type ILogger = Record<Exclude<LogLevels, 'none'>, LoggerFN>;\n\n/**\n * The symbol used to check against an ILogger instace to verify if that ILogger was created by this library\n *\n * @breadcrumb Core / Logger\n * @public\n */\nconst InternalLoggerSymbol = Symbol('InternalLogger');\n\nconst logLevels: Record<\n  LogLevels,\n  [level: LogLevels, consoleMethod: keyof Console][]\n> = {\n  debug: [\n    ['debug', 'debug'],\n    ['verbose', 'debug'],\n    ['info', 'info'],\n    ['error', 'error'],\n    ['warn', 'warn'],\n  ],\n  verbose: [\n    ['verbose', 'debug'],\n    ['info', 'info'],\n    ['error', 'error'],\n    ['warn', 'warn'],\n  ],\n  info: [\n    ['info', 'info'],\n    ['error', 'error'],\n    ['warn', 'warn'],\n  ],\n  warn: [\n    ['warn', 'warn'],\n    ['error', 'error'],\n  ],\n  error: [['error', 'error']],\n  none: [],\n};\n\nconst lazyPrint = (value: () => any | unknown) => {\n  if (typeof value === 'function') return value();\n\n  return value;\n};\n\nconst print =\n  (fn: string) =>\n  (message: any, ...additional: (() => any)[]) =>\n    console[fn](message, ...additional.map(lazyPrint));\n\n/**\n * The method used to create a simple logger instance to use in this library.\n *\n * @remarks Behind the scenes, this simple logger sends the message to the `console` methods.\n *\n * @example\n * ```typescript\n * const logger = createDefaultLogger();\n *\n * logger.error('An error happens.');\n * // An error happens.\n * ```\n *\n * @param level - Select the level of the log\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport function createDefaultLogger(\n  { level }: LoggerOptions = { level: 'error' },\n): ILogger {\n  const levels = logLevels[level];\n\n  if (!levels) throw new Error('Invalid log level');\n\n  const logger = {\n    [InternalLoggerSymbol]: true,\n    error: NO_OP,\n    debug: NO_OP,\n    info: NO_OP,\n    verbose: NO_OP,\n    warn: NO_OP,\n  } as ILogger;\n\n  for (const [level, consoleMethod] of levels)\n    logger[level] = print(consoleMethod);\n\n  return logger;\n}\n\n/**\n * The method used to chck if logger was created by this library, or it was defined by the user.\n *\n * @param logger - The instance of the logger to check\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport function isInternalLogger(logger: ILogger): boolean {\n  return !!logger[InternalLoggerSymbol];\n}\n","/**\n * Return the defaultValue whether the value is undefined, otherwise, return the value.\n *\n * @example\n * ```typescript\n * const value1 = getDefaultIfUndefined(undefined, true);\n * const value2 = getDefaultIfUndefined(false, true);\n *\n * console.log(value1);\n * // true\n * console.log(value2);\n * // false\n * ```\n *\n * @param value - The value to be checked\n * @param defaultValue - The default value when value is undefined\n *\n * @breadcrumb Core\n * @public\n */\nexport function getDefaultIfUndefined<T>(\n  value: T | undefined,\n  defaultValue: T,\n): T {\n  if (value === undefined) return defaultValue;\n\n  return value;\n}\n","/**\n * Transform the path and a map of query params to a string with formatted query params\n *\n * @example\n * ```typescript\n * const path = '/pets/search';\n * const queryParams = { batata: undefined, petType: [ 'dog', 'fish' ] };\n * const result = getPathWithQueryStringParams(path, queryParams);\n * console.log(result);\n * // /pets/search?batata=&petType=dog&petType=fish\n * ```\n *\n * @param path - The path\n * @param queryParams - The query params\n *\n * @breadcrumb Core / Path\n * @public\n */\nexport function getPathWithQueryStringParams(\n  path: string,\n  queryParams:\n    | string\n    | Record<string, string | string[] | undefined>\n    | undefined\n    | null,\n): string {\n  if (String(queryParams || '').length === 0) return path;\n\n  if (typeof queryParams === 'string') return `${path}?${queryParams}`;\n\n  const queryParamsString = getQueryParamsStringFromRecord(queryParams);\n\n  if (!queryParamsString) return path;\n\n  return `${path}?${queryParamsString}`;\n}\n\n/**\n * Map query params to a string with formatted query params\n *\n * @example\n * ```typescript\n * const queryParams = { batata: undefined, petType: [ 'dog', 'fish' ] };\n * const result = getQueryParamsStringFromRecord(queryParams);\n * console.log(result);\n * // batata=&petType=dog&petType=fish\n * ```\n *\n * @param queryParamsRecord - The query params record\n *\n * @breadcrumb Core / Path\n * @public\n */\nexport function getQueryParamsStringFromRecord(\n  queryParamsRecord:\n    | Record<string, string | string[] | undefined>\n    | undefined\n    | null,\n): string {\n  const searchParams = new URLSearchParams();\n\n  const multiValueHeadersEntries: [string, string | string[] | undefined][] =\n    Object.entries(queryParamsRecord || {});\n\n  if (multiValueHeadersEntries.length === 0) return '';\n\n  for (const [key, value] of multiValueHeadersEntries) {\n    if (!Array.isArray(value)) {\n      searchParams.append(key, value || '');\n      continue;\n    }\n\n    for (const arrayValue of value) searchParams.append(key, arrayValue);\n  }\n\n  return searchParams.toString();\n}\n\n/**\n * Type of the function to strip base path\n *\n * @breadcrumb Core / Path\n * @public\n */\nexport type StripBasePathFn = (path: string) => string;\n\nconst NOOPBasePath: StripBasePathFn = (path: string) => path;\n\n/**\n * Get the strip base path function\n *\n * @param basePath - The base path\n *\n * @breadcrumb Core / Path\n * @public\n */\nexport function buildStripBasePath(\n  basePath: string | undefined,\n): StripBasePathFn {\n  if (!basePath) return NOOPBasePath;\n\n  const length = basePath.length;\n\n  return (path: string) => {\n    if (path.startsWith(basePath))\n      return path.slice(path.indexOf(basePath) + length, path.length) || '/';\n\n    return path;\n  };\n}\n","//#region Imports\n\nimport { Readable, Writable } from 'node:stream';\n\n//#endregion\n\n/**\n * Check if stream already ended\n *\n * @param stream - The stream\n *\n * @breadcrumb Core / Stream\n * @public\n */\nexport function isStreamEnded(stream: Readable | Writable): boolean {\n  if ('readableEnded' in stream && stream.readableEnded) return true;\n\n  if ('writableEnded' in stream && stream.writableEnded) return true;\n\n  return false;\n}\n\n/**\n * Wait asynchronous the stream to complete\n *\n * @param stream - The stream\n *\n * @breadcrumb Core / Stream\n * @public\n */\nexport function waitForStreamComplete<TStream extends Readable | Writable>(\n  stream: TStream,\n): Promise<TStream> {\n  if (isStreamEnded(stream)) return Promise.resolve(stream);\n\n  return new Promise<TStream>((resolve, reject) => {\n    // Reading the {@link https://github.com/nodejs/node/blob/v12.22.9/lib/events.js#L262 | emit source code},\n    // it's almost impossible to complete being called twice because the emit function runs synchronously and removes the other listeners,\n    // but I'll leave it at that because I didn't write that code, so I couldn't figure out what the author thought when he wrote this.\n    let isComplete = false;\n\n    function complete(err: any) {\n      /* istanbul ignore next */\n      if (isComplete) return;\n\n      isComplete = true;\n\n      stream.removeListener('error', complete);\n      stream.removeListener('end', complete);\n      stream.removeListener('finish', complete);\n\n      if (err) reject(err);\n      else resolve(stream);\n    }\n\n    stream.once('error', complete);\n    stream.once('end', complete);\n    stream.once('finish', complete);\n  });\n}\n"],"mappings":"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","names":["azure_exports","__export","HttpTriggerV4Adapter","__toCommonJS","import_node_url","import_node_http","import_node_http","getString","data","__name","headerEnd","endChunked","BODY","HEADERS","addData","stream","data","__name","ServerlessResponse","_ServerlessResponse","method","writesToIgnore","socket","NO_OP","encoding","cb","string","getString","index","remainder","res","response","headers","key","value","statusCode","statusMessage","obj","headersObjOrArray","arrayHeaders","name","import_node_http","getEventBodyAsBuffer","body","isBase64Encoded","encoding","buffer","contentLength","__name","getFlattenedHeadersMap","headersMap","separator","lowerCaseKey","acc","headerKey","newKey","headerValue","__name","NO_OP","__name","InternalLoggerSymbol","getDefaultIfUndefined","value","defaultValue","__name","getPathWithQueryStringParams","path","queryParams","queryParamsString","getQueryParamsStringFromRecord","__name","queryParamsRecord","searchParams","multiValueHeadersEntries","key","value","arrayValue","import_node_stream","HttpTriggerV4Adapter","_HttpTriggerV4Adapter","options","__name","event","context","maybeEvent","maybeContext","path","method","headers","getFlattenedHeadersMap","body","bufferBody","contentLength","getEventBodyAsBuffer","remoteAddress","statusCode","originalHeaders","cookies","error","respondWithErrors","delegatedResolver","log","errorResponse","stripBasePath","getDefaultIfUndefined","originalPath","replaceRegex","queryParams","getPathWithQueryStringParams","setCookie","cookie","azureCookieObject","cookieProperty","index","key","value","sanitizedKey","sanitizedValue"]}