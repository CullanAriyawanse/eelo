import { IncomingMessage, ServerResponse } from 'http';
import { F as FrameworkContract } from '../../framework.contract-YnJ-fl1w.js';
import { H as HandlerContract } from '../../handler.contract-8Cb7qLSi.js';
import { R as RawRequest } from '../../raw-request-b6AYnkxd.js';
import '../../adapter.contract-EQE3rlgO.js';
import '../../headers-K2qbcurv.js';
import 'node:http';
import '../../logger-9me5n48P.js';
import '../../request-sVa4pxmx.js';

/**
 * The class that implements a handler for GCP Http Functions
 *
 * @remarks Read more about Http Cloud Function {@link https://cloud.google.com/functions/docs/create-deploy-http-nodejs | here}
 *
 * @breadcrumb Handlers / GCPHandler
 * @public
 */
declare class GCPHandler<TApp> extends RawRequest<TApp> implements HandlerContract<TApp, never, never, never, void, void | Promise<void>> {
    protected readonly name: string;
    /**
     * Default Constructor
     *
     * @param name - The name of this function, should be the during deploy.
     */
    constructor(name: string);
    /**
     * {@inheritDoc}
     */
    getHandler(app: TApp, framework: FrameworkContract<TApp>): (req: IncomingMessage, res: ServerResponse) => void | Promise<void>;
}

export { GCPHandler };
