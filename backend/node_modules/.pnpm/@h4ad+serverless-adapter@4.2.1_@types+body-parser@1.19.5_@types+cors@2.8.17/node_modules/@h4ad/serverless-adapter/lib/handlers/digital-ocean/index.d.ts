import { B as BinarySettings, S as ServerlessHandler } from '../../handler.contract-8Cb7qLSi.js';
import { A as AdapterContract, R as ResolverContract } from '../../adapter.contract-EQE3rlgO.js';
import { F as FrameworkContract } from '../../framework.contract-YnJ-fl1w.js';
import { I as ILogger } from '../../logger-9me5n48P.js';
import { DefaultHandler } from '../default/index.js';
import '../../headers-K2qbcurv.js';
import 'http';
import 'node:http';
import '../../base-handler-fYEk59Xq.js';
import '../../request-sVa4pxmx.js';

/**
 * The class that implements a serverless handler for Digital Ocean Functions.
 *
 * @breadcrumb Handlers / DigitalOceanHandler
 * @public
 */
declare class DigitalOceanHandler<TApp, TEvent, TResponse, TReturn> extends DefaultHandler<TApp, TEvent, void, void, TResponse, TReturn> {
    /**
     * {@inheritDoc}
     */
    getHandler(app: TApp, framework: FrameworkContract<TApp>, adapters: AdapterContract<TEvent, void, TResponse>[], resolverFactory: ResolverContract<TEvent, void, void, TResponse, TReturn>, binarySettings: BinarySettings, respondWithErrors: boolean, log: ILogger): ServerlessHandler<TReturn>;
}

export { DigitalOceanHandler };
