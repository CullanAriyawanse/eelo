import{B as W,a as u,f as w,h as P,x as l,y as v}from"../../chunk-MQYXRLYI.mjs";import{a as c}from"../../chunk-OYOJMOFP.mjs";import"node:stream";import{inspect as C}from"node:util";var x=class extends u{static{c(this,"AwsStreamHandler")}getHandler(r,e,p,a,s,E,o){return awslambda.streamifyResponse(async(t,A,R)=>{let d={response:A,context:R};this.onReceiveRequest(o,t,d,s,E);let n=this.getAdapterByEventAndContext(t,d,p,o);this.onResolveAdapter(o,n),w({event:t,context:R}),await this.forwardRequestToFramework(r,e,t,d,n,s,o)})}onReceiveRequest(r,e,p,a,s){r.debug("SERVERLESS_ADAPTER:PROXY",()=>({event:e,context:C(p,{depth:null}),binarySettings:a,respondWithErrors:s}))}onResolveAdapter(r,e){r.debug("SERVERLESS_ADAPTER:RESOLVED_ADAPTER_NAME: ",e.getAdapterName())}onResolveRequestValues(r,e){r.debug("SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:REQUEST_VALUES",()=>({requestValues:{...e,body:e.body?.toString()}}))}onForwardResponseAdapterResponse(r,e){r.debug("SERVERLESS_ADAPTER:FORWARD_RESPONSE:EVENT_SOURCE_RESPONSE",{successResponse:e})}async forwardRequestToFramework(r,e,p,a,s,E,o){let t=s.getRequest(p,a,o);this.onResolveRequestValues(o,t);let A=new v({method:t.method,headers:t.headers,body:t.body,remoteAddress:t.remoteAddress,url:t.path}),R=new W({method:t.method,onReceiveHeaders:(d,n)=>{let i=P(n),m={statusCode:d,headers:i},S=n["set-cookie"];S&&(m.cookies=Array.isArray(S)?S:[S],delete n["set-cookie"],delete i["set-cookie"]),this.onForwardResponseAdapterResponse(o,m);let y=awslambda.HttpResponseStream.from(a.response,m);return y.write(""),y},log:o});e.sendRequest(r,A,R),o.debug("SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:WAITING_STREAM_COMPLETE"),await l(R),o.debug("SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:STREAM_COMPLETE"),a.response.end()}};export{x as AwsStreamHandler};
//# sourceMappingURL=index.mjs.map