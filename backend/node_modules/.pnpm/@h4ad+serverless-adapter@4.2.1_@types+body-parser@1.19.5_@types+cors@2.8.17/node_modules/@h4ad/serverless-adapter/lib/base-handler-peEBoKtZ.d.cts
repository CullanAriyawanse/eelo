import { H as HandlerContract, B as BinarySettings, S as ServerlessHandler } from './handler.contract-TQk8iM8f.cjs';
import { A as AdapterContract, R as ResolverContract, a as AdapterRequest, S as ServerlessResponse } from './adapter.contract-y5xSjOjo.cjs';
import { F as FrameworkContract } from './framework.contract-YnJ-fl1w.cjs';
import { S as ServerlessRequest } from './request-DNNIV9ub.cjs';
import { I as ILogger } from './logger-9me5n48P.cjs';

/**
 * The abstract class that represents the base class for a handler
 *
 * @breadcrumb Core
 * @public
 */
declare abstract class BaseHandler<TApp, TEvent, TContext, TCallback, TResponse, TReturn> implements HandlerContract<TApp, TEvent, TContext, TCallback, TResponse, TReturn> {
    /**
     * Get the handler that will handle serverless requests
     */
    abstract getHandler(app: TApp, framework: FrameworkContract<TApp>, adapters: AdapterContract<TEvent, TContext, TResponse>[], resolverFactory: ResolverContract<TEvent, TContext, TCallback, TResponse, TReturn>, binarySettings: BinarySettings, respondWithErrors: boolean, log: ILogger): ServerlessHandler<TReturn>;
    /**
     * Get the adapter to handle a specific event and context
     *
     * @param event - The event sent by serverless
     * @param context - The context sent by serverless
     * @param adapters - The list of adapters
     * @param log - The instance of logger
     */
    protected getAdapterByEventAndContext(event: TEvent, context: TContext, adapters: AdapterContract<TEvent, TContext, TResponse>[], log: ILogger): AdapterContract<TEvent, TContext, TResponse>;
    /**
     * Get serverless request and response frmo the adapter request
     *
     * @param requestValues - The request values from adapter
     */
    protected getServerlessRequestResponseFromAdapterRequest(requestValues: AdapterRequest): [request: ServerlessRequest, response: ServerlessResponse];
}

export { BaseHandler as B };
