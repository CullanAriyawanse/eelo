{"version":3,"sources":["../../../src/handlers/azure/index.ts","../../../src/network/request.ts","../../../src/network/response.ts","../../../src/network/utils.ts","../../../src/network/response-stream.ts","../../../src/core/base-handler.ts","../../../src/core/current-invoke.ts","../../../src/core/is-binary.ts","../../../src/core/no-op.ts","../../../src/core/logger.ts","../../../src/core/optional.ts","../../../src/core/stream.ts","../../../src/handlers/default/default.handler.ts","../../../src/handlers/azure/azure.handler.ts"],"sourcesContent":["export * from './azure.handler';\n","// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\nimport { IncomingMessage } from 'node:http';\nimport type { AddressInfo } from 'node:net';\nimport type { SingleValueHeaders } from '../@types';\nimport { NO_OP } from '../core';\n\nconst HTTPS_PORT = 443;\n\n/**\n * The properties to create a {@link ServerlessRequest}\n *\n * @breadcrumb Network / ServerlessRequest\n * @public\n */\nexport interface ServerlessRequestProps {\n  /**\n   * The HTTP Method of the request\n   */\n  method: string;\n\n  /**\n   * The URL requested\n   */\n  url: string;\n\n  /**\n   * The headers from the event source\n   */\n  headers: SingleValueHeaders;\n\n  /**\n   * The body from the event source\n   */\n  body?: Buffer | Uint8Array;\n\n  /**\n   * The IP Address from caller\n   */\n  remoteAddress?: string;\n}\n\n/**\n * The class that represents an {@link http#IncomingMessage} created by the library to represent an actual request to the framework.\n *\n * @breadcrumb Network / ServerlessRequest\n * @public\n */\nexport class ServerlessRequest extends IncomingMessage {\n  constructor({\n    method,\n    url,\n    headers,\n    body,\n    remoteAddress,\n  }: ServerlessRequestProps) {\n    super({\n      encrypted: true,\n      readable: false,\n      remoteAddress,\n      address: () => ({ port: HTTPS_PORT }) as AddressInfo,\n      end: NO_OP,\n      destroy: NO_OP,\n    } as any);\n\n    this.statusCode = 200;\n    this.statusMessage = 'OK';\n    this.complete = true;\n    this.httpVersion = '1.1';\n    this.httpVersionMajor = 1;\n    this.httpVersionMinor = 1;\n    this.method = method;\n    this.headers = headers;\n    this.body = body;\n    this.url = url;\n    this.ip = remoteAddress;\n\n    this._read = () => {\n      this.push(body);\n      this.push(null);\n    };\n  }\n\n  ip?: string;\n  body?: Buffer | Uint8Array;\n}\n","// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\nimport { IncomingMessage, ServerResponse } from 'node:http';\nimport type { Socket } from 'node:net';\nimport { NO_OP } from '../core';\nimport { getString } from './utils';\n\nconst headerEnd = '\\r\\n\\r\\n';\nconst endChunked = '0\\r\\n\\r\\n';\n\nconst BODY = Symbol('Response body');\nconst HEADERS = Symbol('Response headers');\n\nfunction addData(stream: ServerlessResponse, data: Uint8Array | string) {\n  if (\n    Buffer.isBuffer(data) ||\n    typeof data === 'string' ||\n    data instanceof Uint8Array\n  )\n    stream[BODY].push(Buffer.from(data));\n  else throw new Error(`response.write() of unexpected type: ${typeof data}`);\n}\n\n/**\n * The properties to create a {@link ServerlessResponse}.\n *\n * @breadcrumb Network / ServerlessResponse\n * @public\n */\nexport interface ServerlessResponseProps {\n  /**\n   * The HTTP Method from request\n   */\n  method?: string;\n}\n\n/**\n * The class that represents a response instance used to send to the framework and wait until the framework finishes processing the request.\n * Once it's happens, we use the properties from this response to built the response to the cloud.\n *\n * @breadcrumb Network / ServerlessResponse\n * @public\n */\nexport class ServerlessResponse extends ServerResponse {\n  constructor({ method }: ServerlessResponseProps) {\n    super({ method } as any);\n\n    this[BODY] = [];\n    this[HEADERS] = {};\n\n    this.useChunkedEncodingByDefault = false;\n    this.chunkedEncoding = false;\n    this._header = '';\n\n    // this ignore is used because I need to ignore these write calls:\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L934-L935\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L937\n    let writesToIgnore = 1;\n\n    const socket: Partial<Socket> & { _writableState: any } = {\n      _writableState: {},\n      writable: true,\n      on: NO_OP,\n      removeListener: NO_OP,\n      destroy: NO_OP,\n      cork: NO_OP,\n      uncork: NO_OP,\n      write: (\n        data: Uint8Array | string,\n        encoding?: string | null | (() => void),\n        cb?: () => void,\n      ): any => {\n        if (typeof encoding === 'function') {\n          cb = encoding;\n          encoding = null;\n        }\n\n        if (this._header === '' || this._wroteHeader) {\n          if (!this.chunkedEncoding) addData(this, data);\n          else {\n            if (writesToIgnore > 0) writesToIgnore--;\n            else if (data !== endChunked) {\n              addData(this, data);\n              writesToIgnore = 3;\n            }\n          }\n        } else {\n          const string = getString(data);\n          const index = string.indexOf(headerEnd);\n\n          if (index !== -1) {\n            const remainder = string.slice(index + headerEnd.length);\n\n            if (remainder && !this.chunkedEncoding) addData(this, remainder);\n\n            this._wroteHeader = true;\n          }\n        }\n\n        if (typeof cb === 'function') cb();\n      },\n    };\n\n    this.assignSocket(socket as unknown as Socket);\n  }\n\n  _header: string;\n  _headers?: Record<any, any>;\n  _wroteHeader?: boolean;\n\n  [BODY]: any[];\n  [HEADERS]: Record<any, any>;\n\n  get headers(): Record<any, any> {\n    return this[HEADERS];\n  }\n\n  static from(res: IncomingMessage) {\n    const response = new ServerlessResponse({ method: res.method });\n\n    response.statusCode = res.statusCode || 0;\n    response[HEADERS] = res.headers;\n    response[BODY] = (res as any).body ? [Buffer.from((res as any).body)] : [];\n    response.end();\n\n    return response;\n  }\n\n  static body(res: ServerlessResponse): Buffer {\n    return Buffer.concat(res[BODY]);\n  }\n\n  static headers(res: ServerlessResponse) {\n    const headers = res.getHeaders();\n\n    return Object.assign(headers, res[HEADERS]);\n  }\n\n  override setHeader(\n    key: string,\n    value: number | string | readonly string[],\n  ): any {\n    if (this._wroteHeader) this[HEADERS][key] = value;\n    else super.setHeader(key, value);\n  }\n\n  override writeHead(\n    statusCode: number,\n    statusMessage?: string | any | any[],\n    obj?: any | any[],\n  ): any {\n    const headersObjOrArray =\n      typeof statusMessage === 'string' ? obj : statusMessage;\n\n    const arrayHeaders = Array.isArray(headersObjOrArray)\n      ? headersObjOrArray\n      : [headersObjOrArray || {}];\n\n    for (const headers of arrayHeaders) {\n      for (const name in headers) {\n        this.setHeader(name, headers[name]!);\n\n        if (!this._wroteHeader) {\n          // we only need to initiate super.headers once\n          // writeHead will add the other headers itself\n          break;\n        }\n      }\n    }\n\n    return this.callNativeWriteHead(statusCode, statusMessage, obj);\n  }\n\n  /**\n   * I use ignore here because in nodejs 12.x, statusMessage can be string | OutgoingHttpHeaders\n   * But in nodejs \\>=14.x, statusMessage can also be OutgoingHttpHeaders[]\n   * I take care of these cases above, but here I can't handle it well, so I give up\n   * nodejs 12.x ref: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v12/http.d.ts#L229\n   * nodejs 14.x ref: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v14/http.d.ts#L263\n   */\n  protected callNativeWriteHead(\n    statusCode: number,\n    statusMessage?: string | any | any[],\n    obj?: any | any[],\n  ): this {\n    return super.writeHead(statusCode, statusMessage, obj);\n  }\n}\n","/**\n * Get the data from a buffer, string, or Uint8Array\n *\n * @breadcrumb Network\n * @param data - The data that was written inside the stream\n */\nexport function getString(data: Buffer | string | unknown) {\n  if (Buffer.isBuffer(data)) return data.toString('utf8');\n  else if (typeof data === 'string') return data;\n  else if (data instanceof Uint8Array) return new TextDecoder().decode(data);\n  else throw new Error(`response.write() of unexpected type: ${typeof data}`);\n}\n","import { ServerResponse } from 'node:http';\nimport type { Socket } from 'node:net';\nimport type { Writable } from 'node:stream';\nimport type { BothValueHeaders } from '../@types';\nimport { type ILogger, NO_OP, parseHeaders } from '../core';\nimport { getString } from './utils';\n\nconst endChunked = '0\\r\\n\\r\\n';\nconst headerEnd = '\\r\\n\\r\\n';\nconst endStatusSeparator = '\\r\\n';\n\n/**\n * The properties to create a {@link ServerlessStreamResponse}.\n *\n * @breadcrumb Network / ServerlessStreamResponse\n * @public\n */\nexport interface ServerlessStreamResponseProps {\n  /**\n   * The HTTP Method from request\n   */\n  method?: string;\n\n  /**\n   * The callback to receive the headers when they are written to the stream\n   * You need to return a writable stream be able to continue writing the response\n   *\n   * @param statusCode - The status code of the response\n   * @param headers - The headers of the response\n   */\n  onReceiveHeaders: (statusCode: number, headers: BothValueHeaders) => Writable;\n\n  /**\n   * Instance of the logger\n   */\n  log: ILogger;\n}\n\n/**\n * The class that represents a response instance used to send to the framework and wait until the framework finishes processing the request.\n * This response is specially built to deal with transfer-encoding: chunked\n *\n * @breadcrumb Network / ServerlessStreamResponse\n * @public\n */\nexport class ServerlessStreamResponse extends ServerResponse {\n  constructor({\n    method,\n    onReceiveHeaders,\n    log,\n  }: ServerlessStreamResponseProps) {\n    super({ method } as any);\n\n    this.useChunkedEncodingByDefault = true;\n    this.chunkedEncoding = true;\n\n    let internalWritable: Writable | null = null;\n    let isFirstCall = true;\n    // this ignore is used because I need to ignore these write calls:\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L934-L935\n    // https://github.com/nodejs/node/blob/main/lib/_http_outgoing.js#L937\n    let writesToIgnore = 0;\n\n    const socket: Partial<Socket> & { _writableState: any } = {\n      _writableState: {},\n      writable: true,\n      on: NO_OP,\n      removeListener: NO_OP,\n      destroy: NO_OP,\n      cork: NO_OP,\n      uncork: NO_OP,\n      write: (\n        data: Uint8Array | string,\n        encoding?: string | null | (() => void),\n        cb?: () => void,\n      ): any => {\n        // very unlikely, I don't even know how to reproduce this, but exist on types\n        // istanbul ignore if\n        if (typeof encoding === 'function') {\n          cb = encoding;\n          encoding = null;\n        }\n\n        log.debug('SERVERLESS_ADAPTER:RESPONSE_STREAM:DATA', () => ({\n          data: Buffer.isBuffer(data) ? data.toString('utf8') : data,\n          encoding,\n        }));\n\n        if (!isFirstCall && internalWritable) {\n          if (data === endChunked) {\n            internalWritable.end(cb);\n\n            return true;\n          }\n\n          if (writesToIgnore > 0) {\n            writesToIgnore--;\n            return true;\n          }\n\n          internalWritable.write(data, cb);\n          writesToIgnore = 3;\n        } else if (isFirstCall) {\n          isFirstCall = false;\n\n          const stringData = getString(data);\n          const endStatusIndex = stringData.indexOf(endStatusSeparator);\n          const status = +stringData.slice(0, endStatusIndex).split(' ')[1];\n          const endHeaderIndex = stringData.indexOf(headerEnd);\n\n          const headerData = stringData.slice(\n            endStatusIndex + 2,\n            endHeaderIndex,\n          );\n          const headers = parseHeaders(headerData);\n          log.debug(\n            'SERVERLESS_ADAPTER:RESPONSE_STREAM:FRAMEWORK_HEADERS',\n            () => ({\n              headers,\n            }),\n          );\n\n          writesToIgnore = 1;\n          internalWritable = onReceiveHeaders(status, headers);\n\n          // If we get an endChunked right after header which means the response body is empty, we need to immediately end the writable\n          if (stringData.substring(endHeaderIndex + 4) === endChunked)\n            internalWritable.end();\n        }\n\n        return true;\n      },\n    };\n\n    this.assignSocket(socket as unknown as Socket);\n  }\n}\n","//#region Imports\n\nimport type { BinarySettings } from '../@types';\nimport type {\n  AdapterContract,\n  AdapterRequest,\n  FrameworkContract,\n  HandlerContract,\n  ResolverContract,\n  ServerlessHandler,\n} from '../contracts';\nimport { ServerlessRequest, ServerlessResponse } from '../network';\nimport type { ILogger } from './index';\n\n//#endregion\n\n/**\n * The abstract class that represents the base class for a handler\n *\n * @breadcrumb Core\n * @public\n */\nexport abstract class BaseHandler<\n  TApp,\n  TEvent,\n  TContext,\n  TCallback,\n  TResponse,\n  TReturn,\n> implements\n    HandlerContract<TApp, TEvent, TContext, TCallback, TResponse, TReturn>\n{\n  //#region Public Methods\n\n  /**\n   * Get the handler that will handle serverless requests\n   */\n  public abstract getHandler(\n    app: TApp,\n    framework: FrameworkContract<TApp>,\n    adapters: AdapterContract<TEvent, TContext, TResponse>[],\n    resolverFactory: ResolverContract<\n      TEvent,\n      TContext,\n      TCallback,\n      TResponse,\n      TReturn\n    >,\n    binarySettings: BinarySettings,\n    respondWithErrors: boolean,\n    log: ILogger,\n  ): ServerlessHandler<TReturn>;\n\n  //#endregion\n\n  //#region Protected Methods\n\n  /**\n   * Get the adapter to handle a specific event and context\n   *\n   * @param event - The event sent by serverless\n   * @param context - The context sent by serverless\n   * @param adapters - The list of adapters\n   * @param log - The instance of logger\n   */\n  protected getAdapterByEventAndContext(\n    event: TEvent,\n    context: TContext,\n    adapters: AdapterContract<TEvent, TContext, TResponse>[],\n    log: ILogger,\n  ): AdapterContract<TEvent, TContext, TResponse> {\n    const resolvedAdapters = adapters.filter(adapter =>\n      adapter.canHandle(event, context, log),\n    );\n\n    if (resolvedAdapters.length === 0) {\n      throw new Error(\n        \"SERVERLESS_ADAPTER: Couldn't find adapter to handle this event.\",\n      );\n    }\n\n    if (resolvedAdapters.length > 1) {\n      throw new Error(\n        `SERVERLESS_ADAPTER: Two or more adapters was resolved by the event, the adapters are: ${adapters\n          .map(adapter => adapter.getAdapterName())\n          .join(', ')}.`,\n      );\n    }\n\n    return resolvedAdapters[0];\n  }\n\n  /**\n   * Get serverless request and response frmo the adapter request\n   *\n   * @param requestValues - The request values from adapter\n   */\n  protected getServerlessRequestResponseFromAdapterRequest(\n    requestValues: AdapterRequest,\n  ): [request: ServerlessRequest, response: ServerlessResponse] {\n    const request = new ServerlessRequest({\n      method: requestValues.method,\n      headers: requestValues.headers,\n      body: requestValues.body,\n      remoteAddress: requestValues.remoteAddress,\n      url: requestValues.path,\n    });\n\n    const response = new ServerlessResponse({\n      method: requestValues.method,\n    });\n\n    return [request, response];\n  }\n\n  //#endregion\n}\n","/**\n * The type that represents the object that handles the references to the event created by the serverless trigger or context created by the serverless environment.\n *\n * @breadcrumb Core / Current Invoke\n * @public\n */\nexport type CurrentInvoke<TEvent, TContext> = {\n  /**\n   * The event created by the serverless trigger\n   *\n   * @remarks It's only null when you call {@link getCurrentInvoke} outside this library's pipeline.\n   */\n  event: TEvent | null;\n\n  /**\n   * The context created by the serverless environment\n   *\n   * @remarks It's only null when you call {@link getCurrentInvoke} outside this library's pipeline.\n   */\n  context: TContext | null;\n};\n\nconst currentInvoke: CurrentInvoke<any, any> = {\n  context: null,\n  event: null,\n};\n\n/**\n * Get the reference to the event created by the serverless trigger or context created by the serverless environment.\n *\n * @example\n * ```typescript\n * import type { ALBEvent, Context } from 'aws-lambda';\n *\n * // inside the method that handles the aws alb request.\n * const { event, context } = getCurrentInvoke<ALBEvent, Context>();\n * ```\n *\n * @breadcrumb Core / Current Invoke\n * @public\n */\nexport function getCurrentInvoke<TEvent = any, TContext = any>(): CurrentInvoke<\n  TEvent,\n  TContext\n> {\n  return currentInvoke;\n}\n\n/**\n * Method that saves to the event created by the serverless trigger or context created by the serverless environment.\n *\n * @remarks This method MUST NOT be called by you, this method MUST only be used internally in this library.\n *\n * @param event - The event created by the serverless trigger\n * @param context - The context created by the serverless environment\n *\n * @breadcrumb Core / Current Invoke\n * @public\n */\nexport function setCurrentInvoke<TEvent = any, TContext = any>({\n  event,\n  context,\n}: CurrentInvoke<TEvent, TContext>) {\n  currentInvoke.event = event;\n  currentInvoke.context = context;\n}\n","// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\n\n//#region Imports\n\nimport type { BinarySettings, BothValueHeaders } from '../@types';\n\n//#endregion\n\n/**\n * The function that determines by the content encoding whether the response should be treated as binary\n *\n * @example\n * ```typescript\n * const headers = { 'content-encoding': 'gzip' };\n * const isBinary = isContentEncodingBinary(headers, ['gzip']);\n * console.log(isBinary);\n * // true\n * ```\n *\n * @param headers - The headers of the response\n * @param binaryEncodingTypes - The list of content encodings that will be treated as binary\n *\n * @breadcrumb Core / isBinary\n * @public\n */\nexport function isContentEncodingBinary(\n  headers: BothValueHeaders,\n  binaryEncodingTypes: string[],\n): boolean {\n  let contentEncodings = headers['content-encoding'];\n\n  if (!contentEncodings) return false;\n\n  if (!Array.isArray(contentEncodings))\n    contentEncodings = contentEncodings.split(',');\n\n  return contentEncodings.some(value =>\n    binaryEncodingTypes.includes(value.trim()),\n  );\n}\n\n/**\n * The function that returns the content type of headers\n *\n * @example\n * ```typescript\n * const headers = { 'content-type': 'application/json' };\n * const contentType = getContentType(headers);\n * console.log(contentType);\n * // application/json\n * ```\n *\n * @param headers - The headers of the response\n *\n * @breadcrumb Core / isBinary\n * @public\n */\nexport function getContentType(headers: BothValueHeaders): string {\n  const contentTypeHeaderRaw = headers['content-type'];\n  const contentTypeHeader = Array.isArray(contentTypeHeaderRaw)\n    ? contentTypeHeaderRaw[0] || ''\n    : contentTypeHeaderRaw || '';\n\n  if (!contentTypeHeaderRaw) return '';\n\n  // only compare mime type; ignore encoding part\n  const contentTypeStart = contentTypeHeader.indexOf(';');\n\n  if (contentTypeStart === -1) return contentTypeHeader;\n\n  return contentTypeHeader.slice(0, contentTypeStart);\n}\n\n/**\n * The function that determines by the content type whether the response should be treated as binary\n *\n * @example\n * ```typescript\n * const headers = { 'content-type': 'image/png' };\n * const isBinary = isContentTypeBinary(headers, new Map([['image/png', true]]));\n * console.log(isBinary);\n * // true\n * ```\n *\n * @param headers - The headers of the response\n * @param binaryContentTypes - The list of content types that will be treated as binary\n *\n * @breadcrumb Core / isBinary\n * @public\n */\nexport function isContentTypeBinary(\n  headers: BothValueHeaders,\n  binaryContentTypes: string[],\n) {\n  const contentType = getContentType(headers);\n\n  if (!contentType) return false;\n\n  return binaryContentTypes.includes(contentType.trim());\n}\n\n/**\n * The function used to determine from the headers and the binary settings if a response should be encoded or not\n *\n * @example\n * ```typescript\n * const headers = { 'content-type': 'image/png', 'content-encoding': 'gzip' };\n * const isContentBinary = isBinary(headers, { contentEncodings: ['gzip'], contentTypes: ['image/png'] });\n * console.log(isContentBinary);\n * // true\n * ```\n *\n * @param headers - The headers of the response\n * @param binarySettings - The settings for the validation\n *\n * @breadcrumb Core / isBinary\n * @public\n */\nexport function isBinary(\n  headers: BothValueHeaders,\n  binarySettings: BinarySettings,\n): boolean {\n  if ('isBinary' in binarySettings) {\n    if (binarySettings.isBinary === false) return false;\n\n    return binarySettings.isBinary(headers);\n  }\n\n  return (\n    isContentEncodingBinary(headers, binarySettings.contentEncodings) ||\n    isContentTypeBinary(headers, binarySettings.contentTypes)\n  );\n}\n","/**\n * No operation function is used when we need to pass a function, but we don't want to specify any behavior.\n *\n * @breadcrumb Core\n * @public\n */\nexport const NO_OP: (...args: any[]) => any = () => void 0;\n","import { NO_OP } from './no-op';\n\n/**\n * The type representing the possible log levels to choose from.\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type LogLevels =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'none';\n\n/**\n * The options to customize {@link ILogger}\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type LoggerOptions = {\n  /**\n   * Select the log level, {@link LogLevels | see more}.\n   *\n   * @defaultValue error\n   */\n  level: LogLevels;\n};\n\n/**\n * The log function used in any level.\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type LoggerFN = (message: any, ...additional: any[]) => void;\n\n/**\n * The interface representing the logger, you can provide a custom logger by implementing this interface.\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport type ILogger = Record<Exclude<LogLevels, 'none'>, LoggerFN>;\n\n/**\n * The symbol used to check against an ILogger instace to verify if that ILogger was created by this library\n *\n * @breadcrumb Core / Logger\n * @public\n */\nconst InternalLoggerSymbol = Symbol('InternalLogger');\n\nconst logLevels: Record<\n  LogLevels,\n  [level: LogLevels, consoleMethod: keyof Console][]\n> = {\n  debug: [\n    ['debug', 'debug'],\n    ['verbose', 'debug'],\n    ['info', 'info'],\n    ['error', 'error'],\n    ['warn', 'warn'],\n  ],\n  verbose: [\n    ['verbose', 'debug'],\n    ['info', 'info'],\n    ['error', 'error'],\n    ['warn', 'warn'],\n  ],\n  info: [\n    ['info', 'info'],\n    ['error', 'error'],\n    ['warn', 'warn'],\n  ],\n  warn: [\n    ['warn', 'warn'],\n    ['error', 'error'],\n  ],\n  error: [['error', 'error']],\n  none: [],\n};\n\nconst lazyPrint = (value: () => any | unknown) => {\n  if (typeof value === 'function') return value();\n\n  return value;\n};\n\nconst print =\n  (fn: string) =>\n  (message: any, ...additional: (() => any)[]) =>\n    console[fn](message, ...additional.map(lazyPrint));\n\n/**\n * The method used to create a simple logger instance to use in this library.\n *\n * @remarks Behind the scenes, this simple logger sends the message to the `console` methods.\n *\n * @example\n * ```typescript\n * const logger = createDefaultLogger();\n *\n * logger.error('An error happens.');\n * // An error happens.\n * ```\n *\n * @param level - Select the level of the log\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport function createDefaultLogger(\n  { level }: LoggerOptions = { level: 'error' },\n): ILogger {\n  const levels = logLevels[level];\n\n  if (!levels) throw new Error('Invalid log level');\n\n  const logger = {\n    [InternalLoggerSymbol]: true,\n    error: NO_OP,\n    debug: NO_OP,\n    info: NO_OP,\n    verbose: NO_OP,\n    warn: NO_OP,\n  } as ILogger;\n\n  for (const [level, consoleMethod] of levels)\n    logger[level] = print(consoleMethod);\n\n  return logger;\n}\n\n/**\n * The method used to chck if logger was created by this library, or it was defined by the user.\n *\n * @param logger - The instance of the logger to check\n *\n * @breadcrumb Core / Logger\n * @public\n */\nexport function isInternalLogger(logger: ILogger): boolean {\n  return !!logger[InternalLoggerSymbol];\n}\n","/**\n * Return the defaultValue whether the value is undefined, otherwise, return the value.\n *\n * @example\n * ```typescript\n * const value1 = getDefaultIfUndefined(undefined, true);\n * const value2 = getDefaultIfUndefined(false, true);\n *\n * console.log(value1);\n * // true\n * console.log(value2);\n * // false\n * ```\n *\n * @param value - The value to be checked\n * @param defaultValue - The default value when value is undefined\n *\n * @breadcrumb Core\n * @public\n */\nexport function getDefaultIfUndefined<T>(\n  value: T | undefined,\n  defaultValue: T,\n): T {\n  if (value === undefined) return defaultValue;\n\n  return value;\n}\n","//#region Imports\n\nimport { Readable, Writable } from 'node:stream';\n\n//#endregion\n\n/**\n * Check if stream already ended\n *\n * @param stream - The stream\n *\n * @breadcrumb Core / Stream\n * @public\n */\nexport function isStreamEnded(stream: Readable | Writable): boolean {\n  if ('readableEnded' in stream && stream.readableEnded) return true;\n\n  if ('writableEnded' in stream && stream.writableEnded) return true;\n\n  return false;\n}\n\n/**\n * Wait asynchronous the stream to complete\n *\n * @param stream - The stream\n *\n * @breadcrumb Core / Stream\n * @public\n */\nexport function waitForStreamComplete<TStream extends Readable | Writable>(\n  stream: TStream,\n): Promise<TStream> {\n  if (isStreamEnded(stream)) return Promise.resolve(stream);\n\n  return new Promise<TStream>((resolve, reject) => {\n    // Reading the {@link https://github.com/nodejs/node/blob/v12.22.9/lib/events.js#L262 | emit source code},\n    // it's almost impossible to complete being called twice because the emit function runs synchronously and removes the other listeners,\n    // but I'll leave it at that because I didn't write that code, so I couldn't figure out what the author thought when he wrote this.\n    let isComplete = false;\n\n    function complete(err: any) {\n      /* istanbul ignore next */\n      if (isComplete) return;\n\n      isComplete = true;\n\n      stream.removeListener('error', complete);\n      stream.removeListener('end', complete);\n      stream.removeListener('finish', complete);\n\n      if (err) reject(err);\n      else resolve(stream);\n    }\n\n    stream.once('error', complete);\n    stream.once('end', complete);\n    stream.once('finish', complete);\n  });\n}\n","//#region Imports\n\nimport util from 'node:util';\nimport type { BinarySettings, SingleValueHeaders } from '../../@types';\nimport type {\n  AdapterContract,\n  AdapterRequest,\n  FrameworkContract,\n  ResolverContract,\n  ServerlessHandler,\n} from '../../contracts';\nimport {\n  BaseHandler,\n  type ILogger,\n  isBinary,\n  setCurrentInvoke,\n  waitForStreamComplete,\n} from '../../core';\nimport { ServerlessResponse } from '../../network';\n\n//#endregion\n\n/**\n * The class that implements a default serverless handler consisting of a function with event, context and callback parameters respectively\n *\n * @breadcrumb Handlers / DefaultHandler\n * @public\n */\nexport class DefaultHandler<\n  TApp,\n  TEvent,\n  TContext,\n  TCallback,\n  TResponse,\n  TReturn,\n> extends BaseHandler<TApp, TEvent, TContext, TCallback, TResponse, TReturn> {\n  //#region Public Methods\n\n  /**\n   * {@inheritDoc}\n   */\n  public getHandler(\n    app: TApp,\n    framework: FrameworkContract<TApp>,\n    adapters: AdapterContract<TEvent, TContext, TResponse>[],\n    resolverFactory: ResolverContract<\n      TEvent,\n      TContext,\n      TCallback,\n      TResponse,\n      TReturn\n    >,\n    binarySettings: BinarySettings,\n    respondWithErrors: boolean,\n    log: ILogger,\n  ): ServerlessHandler<TReturn> {\n    return (event: TEvent, context: TContext, callback?: TCallback) => {\n      this.onReceiveRequest(\n        log,\n        event,\n        context,\n        binarySettings,\n        respondWithErrors,\n      );\n\n      const adapter = this.getAdapterByEventAndContext(\n        event,\n        context,\n        adapters,\n        log,\n      );\n\n      this.onResolveAdapter(log, adapter);\n\n      setCurrentInvoke({ event, context });\n\n      const resolver = resolverFactory.createResolver({\n        event,\n        context,\n        callback,\n        log,\n        respondWithErrors,\n        adapter,\n      });\n\n      return resolver.run(() =>\n        this.forwardRequestToFramework(\n          app,\n          framework,\n          event,\n          context,\n          adapter,\n          binarySettings,\n          log,\n        ),\n      );\n    };\n  }\n\n  //#endregion\n\n  //#region Hooks\n\n  /**\n   * The hook executed on receive a request, before the request is being processed\n   *\n   * @param log - The instance of logger\n   * @param event - The event sent by serverless\n   * @param context - The context sent by serverless\n   * @param binarySettings - The binary settings\n   * @param respondWithErrors - Indicates whether the error stack should be included in the response or not\n   */\n  protected onReceiveRequest(\n    log: ILogger,\n    event: TEvent,\n    context: TContext,\n    binarySettings: BinarySettings,\n    respondWithErrors: boolean,\n  ): void {\n    log.debug('SERVERLESS_ADAPTER:PROXY', () => ({\n      event: util.inspect(event, { depth: null }),\n      context: util.inspect(context, { depth: null }),\n      binarySettings,\n      respondWithErrors,\n    }));\n  }\n\n  /**\n   * The hook executed after resolve the adapter that will be used to handle the request and response\n   *\n   * @param log - The instance of logger\n   * @param adapter - The adapter resolved\n   */\n  protected onResolveAdapter(\n    log: ILogger,\n    adapter: AdapterContract<TEvent, TContext, TResponse>,\n  ): void {\n    log.debug(\n      'SERVERLESS_ADAPTER:RESOLVED_ADAPTER_NAME: ',\n      adapter.getAdapterName(),\n    );\n  }\n\n  /**\n   * The hook executed after resolves the request values that will be sent to the framework\n   *\n   * @param log - The instance of logger\n   * @param requestValues - The request values returned by the adapter\n   */\n  protected onResolveRequestValues(\n    log: ILogger,\n    requestValues: AdapterRequest,\n  ): void {\n    log.debug(\n      'SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:REQUEST_VALUES',\n      () => ({\n        requestValues: {\n          ...requestValues,\n          body: requestValues.body?.toString(),\n        },\n      }),\n    );\n  }\n\n  /**\n   * The hook executed after handling the response sent by the framework\n   *\n   * @param log - The instance of logger\n   * @param response - The response sent by the framework\n   */\n  protected onResolveForwardedResponseToFramework(\n    log: ILogger,\n    response: ServerlessResponse,\n  ): void {\n    log.debug(\n      'SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:RESPONSE',\n      () => ({\n        response,\n      }),\n    );\n  }\n\n  /**\n   * The hook executed before sending response to the serverless\n   *\n   * @param log - The instance of logger\n   * @param statusCode - The status code of the response\n   * @param body - The body of the response\n   * @param headers - The headers of the response\n   * @param isBase64Encoded - Indicates whether the response was encoded as binary or not\n   */\n  protected onForwardResponse(\n    log: ILogger,\n    statusCode: number,\n    body: string,\n    headers: SingleValueHeaders,\n    isBase64Encoded: boolean,\n  ) {\n    log.debug(\n      'SERVERLESS_ADAPTER:FORWARD_RESPONSE:EVENT_SOURCE_RESPONSE_PARAMS',\n      () => ({\n        statusCode,\n        body,\n        headers,\n        isBase64Encoded,\n      }),\n    );\n  }\n\n  /**\n   * The hook executed before sending response to the serverless with response from adapter\n   *\n   * @param log - The instance of logger\n   * @param successResponse - The success response resolved by the adapter\n   * @param body - The body of the response sent by the framework\n   */\n  protected onForwardResponseAdapterResponse(\n    log: ILogger,\n    successResponse: TResponse,\n    body: string,\n  ) {\n    log.debug(\n      'SERVERLESS_ADAPTER:FORWARD_RESPONSE:EVENT_SOURCE_RESPONSE',\n      () => ({\n        successResponse: util.inspect(successResponse, { depth: null }),\n        body,\n      }),\n    );\n  }\n\n  //#endregion\n\n  //#region Protected Methods\n\n  /**\n   * The function to forward the event to the framework\n   *\n   * @param app - The instance of the app (express, hapi, etc...)\n   * @param framework - The framework that will process requests\n   * @param event - The event sent by serverless\n   * @param context - The context sent by serverless\n   * @param adapter - The adapter resolved to this event\n   * @param log - The instance of logger\n   * @param binarySettings - The binary settings\n   */\n  protected async forwardRequestToFramework(\n    app: TApp,\n    framework: FrameworkContract<TApp>,\n    event: TEvent,\n    context: TContext,\n    adapter: AdapterContract<TEvent, TContext, TResponse>,\n    binarySettings: BinarySettings,\n    log: ILogger,\n  ): Promise<TResponse> {\n    const requestValues = adapter.getRequest(event, context, log);\n\n    this.onResolveRequestValues(log, requestValues);\n\n    const [request, response] =\n      this.getServerlessRequestResponseFromAdapterRequest(requestValues);\n\n    framework.sendRequest(app, request, response);\n\n    await waitForStreamComplete(response);\n\n    this.onResolveForwardedResponseToFramework(log, response);\n\n    return this.forwardResponse(event, response, adapter, binarySettings, log);\n  }\n\n  /**\n   * The function to forward the response back to the serverless\n   *\n   * @param event - The event sent by serverless\n   * @param response - The response of the framework\n   * @param adapter - The adapter resolved to this event\n   * @param binarySettings - The binary settings\n   * @param log - The instance of logger\n   */\n  protected forwardResponse(\n    event: TEvent,\n    response: ServerlessResponse,\n    adapter: AdapterContract<TEvent, TContext, TResponse>,\n    binarySettings: BinarySettings,\n    log: ILogger,\n  ): TResponse {\n    const statusCode = response.statusCode;\n    const headers = ServerlessResponse.headers(response);\n    const isBase64Encoded = isBinary(headers, binarySettings);\n    const encoding = isBase64Encoded ? 'base64' : 'utf8';\n    const body = ServerlessResponse.body(response).toString(encoding);\n    const logBody = isBase64Encoded ? '[BASE64_ENCODED]' : body;\n\n    this.onForwardResponse(log, statusCode, logBody, headers, isBase64Encoded);\n\n    const successResponse = adapter.getResponse({\n      event,\n      statusCode,\n      body,\n      headers,\n      isBase64Encoded,\n      response,\n      log,\n    });\n\n    this.onForwardResponseAdapterResponse(log, successResponse, logBody);\n\n    return successResponse;\n  }\n\n  //#endregion\n}\n","/* eslint-disable @typescript-eslint/unbound-method */\n//#region Imports\n\nimport type { Context } from '@azure/functions';\nimport type { BinarySettings } from '../../@types';\nimport type {\n  AdapterContract,\n  FrameworkContract,\n  ResolverContract,\n  ServerlessHandler,\n} from '../../contracts';\nimport {\n  type ILogger,\n  getDefaultIfUndefined,\n  isInternalLogger,\n} from '../../core';\nimport { DefaultHandler } from '../default';\n\n//#endregion\n\n/**\n * The options to customize {@link AzureHandler}\n *\n * @breadcrumb Handlers / AzureHandler\n * @public\n */\nexport interface AzureHandlerOptions {\n  /**\n   * Indicates to use the context log instead console.log when logger is internal (created by the library)\n   *\n   * @defaultValue true\n   */\n  useContextLogWhenInternalLogger: boolean;\n}\n\n/**\n * The class that implements a serverless handler for Azure Function.\n *\n * When you don't specify a custom logger, the {@link Context} logger is used instead.\n *\n * @breadcrumb Handlers / AzureHandler\n * @public\n */\nexport class AzureHandler<\n  TApp,\n  TEvent,\n  TCallback,\n  TResponse,\n  TReturn,\n> extends DefaultHandler<TApp, TEvent, Context, TCallback, TResponse, TReturn> {\n  //#region Constructor\n\n  /**\n   * Default Constructor\n   */\n  constructor(protected readonly options?: AzureHandlerOptions) {\n    super();\n  }\n\n  //#endregion\n\n  //#region Public Methods\n\n  /**\n   * {@inheritDoc}\n   */\n  public override getHandler(\n    app: TApp,\n    framework: FrameworkContract<TApp>,\n    adapters: AdapterContract<TEvent, Context, TResponse>[],\n    resolverFactory: ResolverContract<\n      TEvent,\n      Context,\n      TCallback,\n      TResponse,\n      TReturn\n    >,\n    binarySettings: BinarySettings,\n    respondWithErrors: boolean,\n    log: ILogger,\n  ): ServerlessHandler<TReturn> {\n    return (context: Context, event: TEvent) => {\n      const useContextLogWhenInternalLogger = getDefaultIfUndefined(\n        this.options?.useContextLogWhenInternalLogger,\n        true,\n      );\n\n      if (isInternalLogger(log) && useContextLogWhenInternalLogger)\n        log = this.createLoggerFromContext(context);\n\n      const defaultHandler = super.getHandler(\n        app,\n        framework,\n        adapters,\n        resolverFactory,\n        binarySettings,\n        respondWithErrors,\n        log,\n      );\n\n      // remove this from context\n      // because user can mess it-up the things\n      // @ts-ignore\n      delete context.done;\n      delete context.res;\n\n      return defaultHandler(event, context, undefined);\n    };\n  }\n\n  //#endregion\n\n  //#region Protected Methods\n\n  /**\n   * Get the {@link ILogger} instance from logger of the context\n   *\n   * @param context - The Azure Context\n   */\n  protected createLoggerFromContext(context: Context): ILogger {\n    return {\n      error: context.log.error,\n      debug: context.log.verbose,\n      verbose: context.log.verbose,\n      info: context.log.info,\n      warn: context.log.warn,\n    };\n  }\n\n  //#endregion\n}\n"],"mappings":"6mBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,kBAAAE,IAAA,eAAAC,EAAAH,GCCA,IAAAI,EAAgC,gBAKhC,IAAMC,EAAa,IAyCNC,EAAN,cAAgC,iBAAgB,CA/CvD,MA+CuD,CAAAC,EAAA,0BACrD,YAAY,CACV,OAAAC,EACA,IAAAC,EACA,QAAAC,EACA,KAAAC,EACA,cAAAC,CACF,EAA2B,CACzB,MAAM,CACJ,UAAW,GACX,SAAU,GACV,cAAAA,EACA,QAAS,KAAO,CAAE,KAAMP,CAAW,GACnC,IAAKQ,EACL,QAASA,CACX,CAAQ,EAER,KAAK,WAAa,IAClB,KAAK,cAAgB,KACrB,KAAK,SAAW,GAChB,KAAK,YAAc,MACnB,KAAK,iBAAmB,EACxB,KAAK,iBAAmB,EACxB,KAAK,OAASL,EACd,KAAK,QAAUE,EACf,KAAK,KAAOC,EACZ,KAAK,IAAMF,EACX,KAAK,GAAKG,EAEV,KAAK,MAAQ,IAAM,CACjB,KAAK,KAAKD,CAAI,EACd,KAAK,KAAK,IAAI,CAChB,CACF,CAEA,GACA,IACF,ECnFA,IAAAG,EAAgD,gBCKzC,SAASC,EAAUC,EAAiC,CACzD,GAAI,OAAO,SAASA,CAAI,EAAG,OAAOA,EAAK,SAAS,MAAM,EACjD,GAAI,OAAOA,GAAS,SAAU,OAAOA,EACrC,GAAIA,aAAgB,WAAY,OAAO,IAAI,YAAY,EAAE,OAAOA,CAAI,EACpE,MAAM,IAAI,MAAM,wCAAwC,OAAOA,CAAI,EAAE,CAC5E,CALgBC,EAAAF,EAAA,aDAhB,IAAMG,EAAY;AAAA;AAAA,EACZC,EAAa;AAAA;AAAA,EAEbC,EAAO,OAAO,eAAe,EAC7BC,EAAU,OAAO,kBAAkB,EAEzC,SAASC,EAAQC,EAA4BC,EAA2B,CACtE,GACE,OAAO,SAASA,CAAI,GACpB,OAAOA,GAAS,UAChBA,aAAgB,WAEhBD,EAAOH,CAAI,EAAE,KAAK,OAAO,KAAKI,CAAI,CAAC,MAChC,OAAM,IAAI,MAAM,wCAAwC,OAAOA,CAAI,EAAE,CAC5E,CARSC,EAAAH,EAAA,WA8BF,IAAMI,EAAN,MAAMC,UAA2B,gBAAe,CA1CvD,MA0CuD,CAAAF,EAAA,2BACrD,YAAY,CAAE,OAAAG,CAAO,EAA4B,CAC/C,MAAM,CAAE,OAAAA,CAAO,CAAQ,EAEvB,KAAKR,CAAI,EAAI,CAAC,EACd,KAAKC,CAAO,EAAI,CAAC,EAEjB,KAAK,4BAA8B,GACnC,KAAK,gBAAkB,GACvB,KAAK,QAAU,GAKf,IAAIQ,EAAiB,EAEfC,EAAoD,CACxD,eAAgB,CAAC,EACjB,SAAU,GACV,GAAIC,EACJ,eAAgBA,EAChB,QAASA,EACT,KAAMA,EACN,OAAQA,EACR,MAAO,CACLP,EACAQ,EACAC,IACQ,CAMR,GALI,OAAOD,GAAa,aACtBC,EAAKD,EACLA,EAAW,MAGT,KAAK,UAAY,IAAM,KAAK,aACzB,KAAK,gBAEJH,EAAiB,EAAGA,IACfL,IAASL,IAChBG,EAAQ,KAAME,CAAI,EAClBK,EAAiB,GALMP,EAAQ,KAAME,CAAI,MAQxC,CACL,IAAMU,EAASC,EAAUX,CAAI,EACvBY,EAAQF,EAAO,QAAQhB,CAAS,EAEtC,GAAIkB,IAAU,GAAI,CAChB,IAAMC,EAAYH,EAAO,MAAME,EAAQlB,EAAU,MAAM,EAEnDmB,GAAa,CAAC,KAAK,iBAAiBf,EAAQ,KAAMe,CAAS,EAE/D,KAAK,aAAe,EACtB,CACF,CAEI,OAAOJ,GAAO,YAAYA,EAAG,CACnC,CACF,EAEA,KAAK,aAAaH,CAA2B,CAC/C,CAEA,QACA,SACA,aAEA,CAACV,CAAI,EACL,CAACC,CAAO,EAER,IAAI,SAA4B,CAC9B,OAAO,KAAKA,CAAO,CACrB,CAEA,OAAO,KAAKiB,EAAsB,CAChC,IAAMC,EAAW,IAAIZ,EAAmB,CAAE,OAAQW,EAAI,MAAO,CAAC,EAE9D,OAAAC,EAAS,WAAaD,EAAI,YAAc,EACxCC,EAASlB,CAAO,EAAIiB,EAAI,QACxBC,EAASnB,CAAI,EAAKkB,EAAY,KAAO,CAAC,OAAO,KAAMA,EAAY,IAAI,CAAC,EAAI,CAAC,EACzEC,EAAS,IAAI,EAENA,CACT,CAEA,OAAO,KAAKD,EAAiC,CAC3C,OAAO,OAAO,OAAOA,EAAIlB,CAAI,CAAC,CAChC,CAEA,OAAO,QAAQkB,EAAyB,CACtC,IAAME,EAAUF,EAAI,WAAW,EAE/B,OAAO,OAAO,OAAOE,EAASF,EAAIjB,CAAO,CAAC,CAC5C,CAES,UACPoB,EACAC,EACK,CACD,KAAK,aAAc,KAAKrB,CAAO,EAAEoB,CAAG,EAAIC,EACvC,MAAM,UAAUD,EAAKC,CAAK,CACjC,CAES,UACPC,EACAC,EACAC,EACK,CACL,IAAMC,EACJ,OAAOF,GAAkB,SAAWC,EAAMD,EAEtCG,EAAe,MAAM,QAAQD,CAAiB,EAChDA,EACA,CAACA,GAAqB,CAAC,CAAC,EAE5B,QAAWN,KAAWO,EACpB,QAAWC,KAAQR,EAGjB,GAFA,KAAK,UAAUQ,EAAMR,EAAQQ,CAAI,CAAE,EAE/B,CAAC,KAAK,aAGR,MAKN,OAAO,KAAK,oBAAoBL,EAAYC,EAAeC,CAAG,CAChE,CASU,oBACRF,EACAC,EACAC,EACM,CACN,OAAO,MAAM,UAAUF,EAAYC,EAAeC,CAAG,CACvD,CACF,EE1LA,IAAAI,EAA+B,gBCsBxB,IAAeC,EAAf,KASP,CA/BA,MA+BA,CAAAC,EAAA,oBAkCY,4BACRC,EACAC,EACAC,EACAC,EAC8C,CAC9C,IAAMC,EAAmBF,EAAS,OAAOG,GACvCA,EAAQ,UAAUL,EAAOC,EAASE,CAAG,CACvC,EAEA,GAAIC,EAAiB,SAAW,EAC9B,MAAM,IAAI,MACR,iEACF,EAGF,GAAIA,EAAiB,OAAS,EAC5B,MAAM,IAAI,MACR,yFAAyFF,EACtF,IAAIG,GAAWA,EAAQ,eAAe,CAAC,EACvC,KAAK,IAAI,CAAC,GACf,EAGF,OAAOD,EAAiB,CAAC,CAC3B,CAOU,+CACRE,EAC4D,CAC5D,IAAMC,EAAU,IAAIC,EAAkB,CACpC,OAAQF,EAAc,OACtB,QAASA,EAAc,QACvB,KAAMA,EAAc,KACpB,cAAeA,EAAc,cAC7B,IAAKA,EAAc,IACrB,CAAC,EAEKG,EAAW,IAAIC,EAAmB,CACtC,OAAQJ,EAAc,MACxB,CAAC,EAED,MAAO,CAACC,EAASE,CAAQ,CAC3B,CAGF,EC9FA,IAAME,EAAyC,CAC7C,QAAS,KACT,MAAO,IACT,EAkCO,SAASC,EAA+C,CAC7D,MAAAC,EACA,QAAAC,CACF,EAAoC,CAClCC,EAAc,MAAQF,EACtBE,EAAc,QAAUD,CAC1B,CANgBE,EAAAJ,EAAA,oBClCT,SAASK,EACdC,EACAC,EACS,CACT,IAAIC,EAAmBF,EAAQ,kBAAkB,EAEjD,OAAKE,GAEA,MAAM,QAAQA,CAAgB,IACjCA,EAAmBA,EAAiB,MAAM,GAAG,GAExCA,EAAiB,KAAKC,GAC3BF,EAAoB,SAASE,EAAM,KAAK,CAAC,CAC3C,GAP8B,EAQhC,CAdgBC,EAAAL,EAAA,2BAgCT,SAASM,EAAeL,EAAmC,CAChE,IAAMM,EAAuBN,EAAQ,cAAc,EAC7CO,EAAoB,MAAM,QAAQD,CAAoB,EACxDA,EAAqB,CAAC,GAAK,GAC3BA,GAAwB,GAE5B,GAAI,CAACA,EAAsB,MAAO,GAGlC,IAAME,EAAmBD,EAAkB,QAAQ,GAAG,EAEtD,OAAIC,IAAqB,GAAWD,EAE7BA,EAAkB,MAAM,EAAGC,CAAgB,CACpD,CAdgBJ,EAAAC,EAAA,kBAiCT,SAASI,EACdT,EACAU,EACA,CACA,IAAMC,EAAcN,EAAeL,CAAO,EAE1C,OAAKW,EAEED,EAAmB,SAASC,EAAY,KAAK,CAAC,EAF5B,EAG3B,CATgBP,EAAAK,EAAA,uBA4BT,SAASG,EACdZ,EACAa,EACS,CACT,MAAI,aAAcA,EACZA,EAAe,WAAa,GAAc,GAEvCA,EAAe,SAASb,CAAO,EAItCD,EAAwBC,EAASa,EAAe,gBAAgB,GAChEJ,EAAoBT,EAASa,EAAe,YAAY,CAE5D,CAdgBT,EAAAQ,EAAA,YChHT,IAAME,EAAiCC,EAAA,IAAG,GAAH,SC+C9C,IAAMC,EAAuB,OAAO,gBAAgB,EA2F7C,SAASC,EAAiBC,EAA0B,CACzD,MAAO,CAAC,CAACA,EAAOC,CAAoB,CACtC,CAFgBC,EAAAH,EAAA,oBC5HT,SAASI,EACdC,EACAC,EACG,CACH,OAAID,IAAU,OAAkBC,EAEzBD,CACT,CAPgBE,EAAAH,EAAA,yBClBhB,IAAAI,GAAmC,kBAY5B,SAASC,EAAcC,EAAsC,CAGlE,MAFI,qBAAmBA,GAAUA,EAAO,eAEpC,kBAAmBA,GAAUA,EAAO,cAG1C,CANgBC,EAAAF,EAAA,iBAgBT,SAASG,EACdF,EACkB,CAClB,OAAID,EAAcC,CAAM,EAAU,QAAQ,QAAQA,CAAM,EAEjD,IAAI,QAAiB,CAACG,EAASC,IAAW,CAI/C,IAAIC,EAAa,GAEjB,SAASC,EAASC,EAAU,CAEtBF,IAEJA,EAAa,GAEbL,EAAO,eAAe,QAASM,CAAQ,EACvCN,EAAO,eAAe,MAAOM,CAAQ,EACrCN,EAAO,eAAe,SAAUM,CAAQ,EAEpCC,EAAKH,EAAOG,CAAG,EACdJ,EAAQH,CAAM,EACrB,CAZSC,EAAAK,EAAA,YAcTN,EAAO,KAAK,QAASM,CAAQ,EAC7BN,EAAO,KAAK,MAAOM,CAAQ,EAC3BN,EAAO,KAAK,SAAUM,CAAQ,CAChC,CAAC,CACH,CA7BgBL,EAAAC,EAAA,yBC5BhB,IAAAM,EAAiB,qBA0BV,IAAMC,EAAN,cAOGC,CAAmE,CAnC7E,MAmC6E,CAAAC,EAAA,uBAMpE,WACLC,EACAC,EACAC,EACAC,EAOAC,EACAC,EACAC,EAC4B,CAC5B,MAAO,CAACC,EAAeC,EAAmBC,IAAyB,CACjE,KAAK,iBACHH,EACAC,EACAC,EACAJ,EACAC,CACF,EAEA,IAAMK,EAAU,KAAK,4BACnBH,EACAC,EACAN,EACAI,CACF,EAEA,YAAK,iBAAiBA,EAAKI,CAAO,EAElCC,EAAiB,CAAE,MAAAJ,EAAO,QAAAC,CAAQ,CAAC,EAElBL,EAAgB,eAAe,CAC9C,MAAAI,EACA,QAAAC,EACA,SAAAC,EACA,IAAAH,EACA,kBAAAD,EACA,QAAAK,CACF,CAAC,EAEe,IAAI,IAClB,KAAK,0BACHV,EACAC,EACAM,EACAC,EACAE,EACAN,EACAE,CACF,CACF,CACF,CACF,CAeU,iBACRA,EACAC,EACAC,EACAJ,EACAC,EACM,CACNC,EAAI,MAAM,2BAA4B,KAAO,CAC3C,MAAO,EAAAM,QAAK,QAAQL,EAAO,CAAE,MAAO,IAAK,CAAC,EAC1C,QAAS,EAAAK,QAAK,QAAQJ,EAAS,CAAE,MAAO,IAAK,CAAC,EAC9C,eAAAJ,EACA,kBAAAC,CACF,EAAE,CACJ,CAQU,iBACRC,EACAI,EACM,CACNJ,EAAI,MACF,6CACAI,EAAQ,eAAe,CACzB,CACF,CAQU,uBACRJ,EACAO,EACM,CACNP,EAAI,MACF,iEACA,KAAO,CACL,cAAe,CACb,GAAGO,EACH,KAAMA,EAAc,MAAM,SAAS,CACrC,CACF,EACF,CACF,CAQU,sCACRP,EACAQ,EACM,CACNR,EAAI,MACF,2DACA,KAAO,CACL,SAAAQ,CACF,EACF,CACF,CAWU,kBACRR,EACAS,EACAC,EACAC,EACAC,EACA,CACAZ,EAAI,MACF,mEACA,KAAO,CACL,WAAAS,EACA,KAAAC,EACA,QAAAC,EACA,gBAAAC,CACF,EACF,CACF,CASU,iCACRZ,EACAa,EACAH,EACA,CACAV,EAAI,MACF,4DACA,KAAO,CACL,gBAAiB,EAAAM,QAAK,QAAQO,EAAiB,CAAE,MAAO,IAAK,CAAC,EAC9D,KAAAH,CACF,EACF,CACF,CAiBA,MAAgB,0BACdhB,EACAC,EACAM,EACAC,EACAE,EACAN,EACAE,EACoB,CACpB,IAAMO,EAAgBH,EAAQ,WAAWH,EAAOC,EAASF,CAAG,EAE5D,KAAK,uBAAuBA,EAAKO,CAAa,EAE9C,GAAM,CAACO,EAASN,CAAQ,EACtB,KAAK,+CAA+CD,CAAa,EAEnE,OAAAZ,EAAU,YAAYD,EAAKoB,EAASN,CAAQ,EAE5C,MAAMO,EAAsBP,CAAQ,EAEpC,KAAK,sCAAsCR,EAAKQ,CAAQ,EAEjD,KAAK,gBAAgBP,EAAOO,EAAUJ,EAASN,EAAgBE,CAAG,CAC3E,CAWU,gBACRC,EACAO,EACAJ,EACAN,EACAE,EACW,CACX,IAAMS,EAAaD,EAAS,WACtBG,EAAUK,EAAmB,QAAQR,CAAQ,EAC7CI,EAAkBK,EAASN,EAASb,CAAc,EAClDoB,EAAWN,EAAkB,SAAW,OACxCF,EAAOM,EAAmB,KAAKR,CAAQ,EAAE,SAASU,CAAQ,EAC1DC,EAAUP,EAAkB,mBAAqBF,EAEvD,KAAK,kBAAkBV,EAAKS,EAAYU,EAASR,EAASC,CAAe,EAEzE,IAAMC,EAAkBT,EAAQ,YAAY,CAC1C,MAAAH,EACA,WAAAQ,EACA,KAAAC,EACA,QAAAC,EACA,gBAAAC,EACA,SAAAJ,EACA,IAAAR,CACF,CAAC,EAED,YAAK,iCAAiCA,EAAKa,EAAiBM,CAAO,EAE5DN,CACT,CAGF,EC5QO,IAAMO,EAAN,cAMGC,CAAqE,CAM7E,YAA+BC,EAA+B,CAC5D,MAAM,EADuB,aAAAA,CAE/B,CAzDF,MAiD+E,CAAAC,EAAA,qBAiB7D,WACdC,EACAC,EACAC,EACAC,EAOAC,EACAC,EACAC,EAC4B,CAC5B,MAAO,CAACC,EAAkBC,IAAkB,CAC1C,IAAMC,EAAkCC,EACtC,KAAK,SAAS,gCACd,EACF,EAEIC,EAAiBL,CAAG,GAAKG,IAC3BH,EAAM,KAAK,wBAAwBC,CAAO,GAE5C,IAAMK,EAAiB,MAAM,WAC3BZ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,CACF,EAKA,cAAOC,EAAQ,KACf,OAAOA,EAAQ,IAERK,EAAeJ,EAAOD,EAAS,MAAS,CACjD,CACF,CAWU,wBAAwBA,EAA2B,CAC3D,MAAO,CACL,MAAOA,EAAQ,IAAI,MACnB,MAAOA,EAAQ,IAAI,QACnB,QAASA,EAAQ,IAAI,QACrB,KAAMA,EAAQ,IAAI,KAClB,KAAMA,EAAQ,IAAI,IACpB,CACF,CAGF","names":["azure_exports","__export","AzureHandler","__toCommonJS","import_node_http","HTTPS_PORT","ServerlessRequest","__name","method","url","headers","body","remoteAddress","NO_OP","import_node_http","getString","data","__name","headerEnd","endChunked","BODY","HEADERS","addData","stream","data","__name","ServerlessResponse","_ServerlessResponse","method","writesToIgnore","socket","NO_OP","encoding","cb","string","getString","index","remainder","res","response","headers","key","value","statusCode","statusMessage","obj","headersObjOrArray","arrayHeaders","name","import_node_http","BaseHandler","__name","event","context","adapters","log","resolvedAdapters","adapter","requestValues","request","ServerlessRequest","response","ServerlessResponse","currentInvoke","setCurrentInvoke","event","context","currentInvoke","__name","isContentEncodingBinary","headers","binaryEncodingTypes","contentEncodings","value","__name","getContentType","contentTypeHeaderRaw","contentTypeHeader","contentTypeStart","isContentTypeBinary","binaryContentTypes","contentType","isBinary","binarySettings","NO_OP","__name","InternalLoggerSymbol","isInternalLogger","logger","InternalLoggerSymbol","__name","getDefaultIfUndefined","value","defaultValue","__name","import_node_stream","isStreamEnded","stream","__name","waitForStreamComplete","resolve","reject","isComplete","complete","err","import_node_util","DefaultHandler","BaseHandler","__name","app","framework","adapters","resolverFactory","binarySettings","respondWithErrors","log","event","context","callback","adapter","setCurrentInvoke","util","requestValues","response","statusCode","body","headers","isBase64Encoded","successResponse","request","waitForStreamComplete","ServerlessResponse","isBinary","encoding","logBody","AzureHandler","DefaultHandler","options","__name","app","framework","adapters","resolverFactory","binarySettings","respondWithErrors","log","context","event","useContextLogWhenInternalLogger","getDefaultIfUndefined","isInternalLogger","defaultHandler"]}