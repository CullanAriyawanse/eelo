{"version":3,"sources":["../../../src/resolvers/callback/callback.resolver.ts"],"sourcesContent":["//#region Imports\n\nimport type {\n  DelegatedResolver,\n  Resolver,\n  ResolverContract,\n  ResolverProps,\n} from '../../contracts';\n\n//#endregion\n\n/**\n * The default signature of the callback sent by serverless\n *\n * @breadcrumb Resolvers / CallbackResolver\n * @public\n */\nexport type ServerlessCallback<TResponse> = (\n  error: Error | null,\n  success: TResponse | null,\n) => void;\n\n/**\n * The class that implements the resolver using the callback function sent by serverless\n *\n * @remarks To use this resolver on AWS, you MUST leave `{@link https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html | callbackWaitsForEmptyEventLoop}` as true, otherwise, AWS will not wait for this resolver to resolve.\n *\n * @breadcrumb Resolvers / CallbackResolver\n * @public\n */\nexport class CallbackResolver<TEvent, TContext, TResponse>\n  implements\n    ResolverContract<\n      TEvent,\n      TContext,\n      ServerlessCallback<any>,\n      TResponse,\n      void\n    >\n{\n  /**\n   * {@inheritDoc}\n   */\n  public createResolver({\n    callback,\n    event,\n    log,\n    respondWithErrors,\n    adapter,\n  }: ResolverProps<\n    TEvent,\n    TContext,\n    ServerlessCallback<any>,\n    TResponse\n  >): Resolver<any, void> {\n    if (!callback) {\n      throw new Error(\n        'Could not figure out how to create the resolver because the \"callback\" argument was not sent.',\n      );\n    }\n\n    const delegatedResolver: DelegatedResolver<any> = {\n      succeed: response => callback(null, response),\n      fail: error => callback(error, null),\n    };\n\n    return {\n      run: task => {\n        task()\n          .then(response => delegatedResolver.succeed(response))\n          .catch(error => {\n            log.error(\n              'SERVERLESS_ADAPTER:RESPOND_TO_EVENT_SOURCE_WITH_ERROR',\n              error,\n            );\n\n            adapter.onErrorWhileForwarding({\n              delegatedResolver,\n              error,\n              log,\n              event,\n              respondWithErrors,\n            });\n          });\n      },\n    };\n  }\n}\n"],"mappings":"6CA8BO,IAAMA,EAAN,KASP,CAvCA,MAuCA,CAAAC,EAAA,yBAIS,eAAe,CACpB,SAAAC,EACA,MAAAC,EACA,IAAAC,EACA,kBAAAC,EACA,QAAAC,CACF,EAKwB,CACtB,GAAI,CAACJ,EACH,MAAM,IAAI,MACR,+FACF,EAGF,IAAMK,EAA4C,CAChD,QAASC,GAAYN,EAAS,KAAMM,CAAQ,EAC5C,KAAMC,GAASP,EAASO,EAAO,IAAI,CACrC,EAEA,MAAO,CACL,IAAKC,GAAQ,CACXA,EAAK,EACF,KAAKF,GAAYD,EAAkB,QAAQC,CAAQ,CAAC,EACpD,MAAMC,GAAS,CACdL,EAAI,MACF,wDACAK,CACF,EAEAH,EAAQ,uBAAuB,CAC7B,kBAAAC,EACA,MAAAE,EACA,IAAAL,EACA,MAAAD,EACA,kBAAAE,CACF,CAAC,CACH,CAAC,CACL,CACF,CACF,CACF","names":["CallbackResolver","__name","callback","event","log","respondWithErrors","adapter","delegatedResolver","response","error","task"]}